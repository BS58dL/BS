repeat
	task.wait()
until game:IsLoaded()
local library = {}
local ToggleUI = false
library.currentTab = nil
library.flags = {}
library.configs = {}
library.currentConfig = "默认配置"
library.activeUI = "Default" -- 新增：当前激活的UI（Default/WindUI）
library.uiSettings = {
    mainColor = Color3.fromRGB(0, 0, 0),
    backgroundColor = Color3.fromRGB(0, 0, 0),
    backgroundColorTransparency = 0.5,
    controlColor = Color3.fromRGB(30, 30, 30),
    controlTransparency = 0.3,
    textColor = Color3.fromRGB(255, 255, 255),
    placeholderColor = Color3.fromRGB(180, 180, 180),
    disabledTextColor = Color3.fromRGB(150, 150, 150),
    uiSize = 1.0,
    backgroundImage = "",
    minimizeShape = "Square",
    minimizeImage = "",
    minimizeSize = UDim2.new(0, 61, 0, 32),
    cornerRadius = 6,
    buttonCornerRadius = 6,
    sectionCornerRadius = 6,
    sliderCornerRadius = 4,
    dropdownCornerRadius = 6,
    titleTextSize = 16,
    buttonTextSize = 16,
    labelTextSize = 14,
    sectionTextSize = 16,
    tabTextSize = 14,
    sliderValueTextSize = 14,
    dropdownTextSize = 16,
    textboxTextSize = 14
}
-- 移除收藏相关字段
library.uiElements = {}

-- 配置管理函数（保留原功能，移除收藏相关逻辑）
local function SaveConfig(name)
    if not name or name == "" then name = library.currentConfig end
    local data = {
        flags = {},
        uiSettings = library.uiSettings,
        configName = name,
        saveTime = os.time()
    }
    for flag, value in pairs(library.flags) do
        data.flags[flag] = value
    end
    library.configs[name] = data
    if writefile then
        local success, result = pcall(function()
            writefile("BlackHoleUI_" .. name .. ".json", game:GetService("HttpService"):JSONEncode(data))
        end)
        if success then
            return true, "配置保存成功: " .. name
        else
            return false, "保存失败: " .. tostring(result)
        end
    end
    return true, "配置已保存到内存: " .. name
end

local function LoadConfig(name)
    if not library.configs[name] then
        if readfile and isfile then
            local filename = "BlackHoleUI_" .. name .. ".json"
            if isfile(filename) then
                local success, result = pcall(function()
                    local data = game:GetService("HttpService"):JSONDecode(readfile(filename))
                    library.configs[name] = data
                end)
                if not success then
                    return false, "加载失败: " .. tostring(result)
                end
            else
                return false, "配置不存在: " .. name
            end
        else
            return false, "配置不存在: " .. name
        end
    end
    local config = library.configs[name]
    library.currentConfig = name
    if config.uiSettings then
        for setting, value in pairs(config.uiSettings) do
            library.uiSettings[setting] = value
        end
        if library.UpdateUIStyle then
            library:UpdateUIStyle()
        end
    end
    for flag, value in pairs(config.flags) do
        library.flags[flag] = value
        if library.components and library.components[flag] then
            local component = library.components[flag]
            if component.SetState then
                component:SetState(value)
            elseif component.SetValue then
                component:SetValue(value)
            elseif component.Set then
                component:Set(value)
            end
        end
    end
    return true, "配置加载成功: " .. name
end

local function DeleteConfig(name)
    if library.configs[name] then
        library.configs[name] = nil
        if delfile and isfile then
            local filename = "BlackHoleUI_" .. name .. ".json"
            if isfile(filename) then
                delfile(filename)
            end
        end
        return true, "配置已删除: " .. name
    end
    return false, "配置不存在: " .. name
end

local function GetConfigList()
    local configs = {}
    for name, _ in pairs(library.configs) do
        table.insert(configs, name)
    end
    if listfiles and isfolder then
        pcall(function()
            local files = listfiles("")
            for _, file in pairs(files) do
                if file:find("BlackHoleUI_") and file:find(".json") then
                    local name = file:match("BlackHoleUI_(.+)%.json")
                    if name and not library.configs[name] then
                        table.insert(configs, name)
                    end
                end
            end
        end)
    end
    table.sort(configs)
    return configs
end

local function CopyConfigData()
    local configData = {
        flags = library.flags,
        uiSettings = library.uiSettings,
        configName = library.currentConfig,
        exportTime = os.date("%Y-%m-%d %H:%M:%S")
    }
    local jsonData = game:GetService("HttpService"):JSONEncode(configData)
    if setclipboard then
        setclipboard(jsonData)
        return true, "配置数据已复制到剪贴板"
    else
        return false, "无法访问剪贴板"
    end
end

local function UpdateConfigFromData(jsonData)
    local success, configData = pcall(function()
        return game:GetService("HttpService"):JSONDecode(jsonData)
    end)
    if not success then
        return false, "JSON数据格式错误"
    end
    if configData.uiSettings then
        for setting, value in pairs(configData.uiSettings) do
            library.uiSettings[setting] = value
        end
    end
    if configData.flags then
        for flag, value in pairs(configData.flags) do
            library.flags[flag] = value
            if library.components and library.components[flag] then
                local component = library.components[flag]
                if component.SetState then
                    component:SetState(value)
                elseif component.SetValue then
                    component:SetValue(value)
                elseif component.Set then
                    component:Set(value)
                end
            end
        end
    end
    if library.UpdateUIStyle then
        library:UpdateUIStyle()
    end
    SaveConfig(library.currentConfig)
    return true, "配置数据更新成功"
end

-- 工具函数（保留原功能）
local services = setmetatable({}, {
	__index = function(t, k)
		return game.GetService(game, k)
	end,
})
local mouse = services.Players.LocalPlayer:GetMouse()

function Tween(obj, t, data)
	services.TweenService
		:Create(obj, TweenInfo.new(t[1], Enum.EasingStyle[t[2]], Enum.EasingDirection[t[3]]), data)
		:Play()
	return true
end

function Ripple(obj)
	spawn(function()
		if obj.ClipsDescendants ~= true then
			obj.ClipsDescendants = true
		end
		local Ripple = Instance.new("ImageLabel")
		Ripple.Name = "Ripple"
		Ripple.Parent = obj
		Ripple.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		Ripple.BackgroundTransparency = 1.000
		Ripple.ZIndex = 8
		Ripple.Image = "rbxassetid://2708891598"
		Ripple.ImageTransparency = 0.800
		Ripple.ScaleType = Enum.ScaleType.Fit
		Ripple.ImageColor3 = Color3.fromRGB(255, 255, 255)
		Ripple.Position = UDim2.new(
			(mouse.X - Ripple.AbsolutePosition.X) / obj.AbsoluteSize.X,
			0,
			(mouse.Y - Ripple.AbsolutePosition.Y) / obj.AbsoluteSize.Y,
			0
		)
		Tween(
			Ripple,
			{ 0.3, "Linear", "InOut" },
			{ Position = UDim2.new(-5.5, 0, -5.5, 0), Size = UDim2.new(12, 0, 12, 0) }
		)
		wait(0.15)
		Tween(Ripple, { 0.3, "Linear", "InOut" }, { ImageTransparency = 1 })
		wait(0.3)
		Ripple:Destroy()
	end)
end

local toggled = false
local switchingTabs = false

function switchTab(new)
	if switchingTabs then
		return
	end
	local old = library.currentTab
	if old == nil then
		new[2].Visible = true
		library.currentTab = new
		services.TweenService:Create(new[1], TweenInfo.new(0.1), { ImageTransparency = 0 }):Play()
		services.TweenService:Create(new[1].TabText, TweenInfo.new(0.1), { TextTransparency = 0 }):Play()
		return
	end
	if old[1] == new[1] then
		return
	end
	switchingTabs = true
	library.currentTab = new
	services.TweenService:Create(old[1], TweenInfo.new(0.1), { ImageTransparency = 0.2 }):Play()
	services.TweenService:Create(new[1], TweenInfo.new(0.1), { ImageTransparency = 0 }):Play()
	services.TweenService:Create(old[1].TabText, TweenInfo.new(0.1), { TextTransparency = 0.2 }):Play()
	services.TweenService:Create(new[1].TabText, TweenInfo.new(0.1), { TextTransparency = 0 }):Play()
	old[2].Visible = false
	new[2].Visible = true
	task.wait(0.1)
	switchingTabs = false
end

function drag(frame, hold)
	if not hold then
		hold = frame
	end
	local dragging
	local dragInput
	local dragStart
	local startPos
	local function update(input)
		local delta = input.Position - dragStart
		frame.Position =
			UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
	end
	hold.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = true
			dragStart = input.Position
			startPos = frame.Position
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
				end
			end)
		end
	end)
	frame.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement then
			dragInput = input
		end
	end)
	services.UserInputService.InputChanged:Connect(function(input)
		if input == dragInput and dragging then
			update(input)
		end
	end)
end

-- 新增：WindUI主题配置（高仿原WindUI风格）
library.windUIThemes = {
    Dark = {
        Accent = Color3.fromHex("#18181b"),
        Dialog = Color3.fromHex("#161616"),
        Outline = Color3.fromHex("#FFFFFF"),
        Text = Color3.fromHex("#FFFFFF"),
        Placeholder = Color3.fromHex("#7a7a7a"),
        Background = Color3.fromHex("#101010"),
        Button = Color3.fromHex("#52525b"),
        Icon = Color3.fromHex("#a1a1aa")
    },
    Light = {
        Accent = Color3.fromHex("#FFFFFF"),
        Dialog = Color3.fromHex("#f4f4f5"),
        Outline = Color3.fromHex("#09090b"),
        Text = Color3.fromHex("#000000"),
        Placeholder = Color3.fromHex("#555555"),
        Background = Color3.fromHex("#e4e4e7"),
        Button = Color3.fromHex("#18181b"),
        Icon = Color3.fromHex("#52525b")
    }
}
library.currentWindTheme = "Dark"

-- 新增：切换UI样式核心函数
function library:SwitchUI(uiType)
    if library.activeUI == uiType then return end
    library.activeUI = uiType
    
    -- 隐藏所有UI元素
    if self.uiElements.Main then
        self.uiElements.Main.Visible = false
    end
    if self.uiElements.WindMain then
        self.uiElements.WindMain.Visible = false
    end
    
    -- 根据选中的UI类型创建/显示对应UI
    if uiType == "Default" then
        if not self.uiElements.Main then
            self:CreateDefaultUI()
        else
            self.uiElements.Main.Visible = true
            self:UpdateUIStyle()
        end
    elseif uiType == "WindUI" then
        if not self.uiElements.WindMain then
            self:CreateWindUI()
        else
            self.uiElements.WindMain.Visible = true
            self:UpdateWindUIStyle()
        end
    end
end

-- 默认UI创建（保留原UI逻辑，移除收藏相关代码）
function library:CreateDefaultUI()
    for _, v in next, services.CoreGui:GetChildren() do
        if v.Name == "REN" then
            v:Destroy()
        end
    end
    
    local dogent = Instance.new("ScreenGui")
    local Main = Instance.new("Frame")
    local TabMain = Instance.new("Frame")
    local MainC = Instance.new("UICorner")
    local SB = Instance.new("Frame")
    local SBC = Instance.new("UICorner")
    local Side = Instance.new("Frame")
    local SideG = Instance.new("UIGradient")
    local TabBtns = Instance.new("ScrollingFrame")
    local TabBtnsL = Instance.new("UIListLayout")
    local ScriptTitle = Instance.new("TextLabel")
    local SBG = Instance.new("UIGradient")
    local Open = Instance.new("TextButton")
    local OpenCorner = Instance.new("UICorner")
    local UIG = Instance.new("UIGradient")
    local DropShadowHolder = Instance.new("Frame")
    local DropShadow = Instance.new("ImageLabel")
    local UICornerMain = Instance.new("UICorner")
    local UIGradient = Instance.new("UIGradient")
    local UIGradientTitle = Instance.new("UIGradient")
    local BackgroundImage = Instance.new("ImageLabel")
    
    if syn and syn.protect_gui then
        syn.protect_gui(dogent)
    end
    
    dogent.Name = "REN"
    dogent.Parent = services.CoreGui
    
    self.uiElements = {
        Main = Main,
        TabMain = TabMain,
        SB = SB,
        Side = Side,
        Open = Open,
        OpenCorner = OpenCorner,
        BackgroundImage = BackgroundImage,
        ScriptTitle = ScriptTitle,
        ScreenGui = dogent
    }
    
    function UiDestroy()
        dogent:Destroy()
    end
    
    function ToggleUILib()
        Main.Visible = not Main.Visible
    end
    
    function self:UpdateUIStyle()
        local baseWidth, baseHeight = 572, 353
        Main.Size = UDim2.new(0, baseWidth * self.uiSettings.uiSize, 0, baseHeight * self.uiSettings.uiSize)
        Main.Position = UDim2.new(0.5, 0, 0.5, 0)
        
        Main.BackgroundColor3 = self.uiSettings.backgroundColor
        Main.BackgroundTransparency = self.uiSettings.backgroundColorTransparency
        
        SB.BackgroundColor3 = self.uiSettings.backgroundColor
        SB.BackgroundTransparency = self.uiSettings.backgroundColorTransparency
        Side.BackgroundColor3 = self.uiSettings.backgroundColor
        Side.BackgroundTransparency = self.uiSettings.backgroundColorTransparency
        
        TabMain.Size = UDim2.new(0, 448 * self.uiSettings.uiSize, 0, 353 * self.uiSettings.uiSize)
        
        if UICornerMain then
            UICornerMain.CornerRadius = UDim.new(0, self.uiSettings.cornerRadius * self.uiSettings.uiSize)
        end
        
        if SBC then
            SBC.CornerRadius = UDim.new(0, self.uiSettings.cornerRadius * self.uiSettings.uiSize)
        end
        
        if self.uiSettings.backgroundImage and self.uiSettings.backgroundImage ~= "" then
            BackgroundImage.Image = "rbxassetid://" .. self.uiSettings.backgroundImage
            BackgroundImage.Visible = true
        else
            BackgroundImage.Visible = false
        end
        
        Open.Size = UDim2.new(0, self.uiSettings.minimizeSize.X.Offset * self.uiSettings.uiSize, 
                              0, self.uiSettings.minimizeSize.Y.Offset * self.uiSettings.uiSize)
        Open.BackgroundColor3 = self.uiSettings.backgroundColor
        Open.BackgroundTransparency = self.uiSettings.backgroundColorTransparency
        Open.TextColor3 = self.uiSettings.textColor
        Open.TextSize = 14 * self.uiSettings.uiSize
        
        if self.uiSettings.minimizeShape == "PureCircle" then
            local size = math.min(self.uiSettings.minimizeSize.X.Offset, self.uiSettings.minimizeSize.Y.Offset) * self.uiSettings.uiSize
            Open.Size = UDim2.new(0, size, 0, size)
            OpenCorner.CornerRadius = UDim.new(1, 0)
        elseif self.uiSettings.minimizeShape == "Circle" then
            OpenCorner.CornerRadius = UDim.new(0.5, 0)
        elseif self.uiSettings.minimizeShape == "Rounded" then
            OpenCorner.CornerRadius = UDim.new(0, 8 * self.uiSettings.uiSize)
        else
            OpenCorner.CornerRadius = UDim.new(0, 0)
        end
        
        if self.uiSettings.minimizeImage and self.uiSettings.minimizeImage ~= "" then
            local imageLabel = Open:FindFirstChild("MinimizeImage")
            if not imageLabel then
                imageLabel = Instance.new("ImageLabel")
                imageLabel.Name = "MinimizeImage"
                imageLabel.Parent = Open
                imageLabel.BackgroundTransparency = 1
                imageLabel.Size = UDim2.new(0.7, 0, 0.7, 0)
                imageLabel.Position = UDim2.new(0.15, 0, 0.15, 0)
                imageLabel.ZIndex = Open.ZIndex + 1
            end
            imageLabel.Image = "rbxassetid://" .. self.uiSettings.minimizeImage
            Open.Text = ""
        else
            local imageLabel = Open:FindFirstChild("MinimizeImage")
            if imageLabel then
                imageLabel:Destroy()
            end
            Open.Text = "黑洞中心"
        end
        
        ScriptTitle.TextColor3 = self.uiSettings.textColor
        ScriptTitle.TextSize = self.uiSettings.titleTextSize * self.uiSettings.uiSize
        
        SideG.Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0.00, self.uiSettings.controlColor), 
            ColorSequenceKeypoint.new(1.00, self.uiSettings.controlColor)
        })
        
        SBG.Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0.00, self.uiSettings.controlColor), 
            ColorSequenceKeypoint.new(1.00, self.uiSettings.controlColor)
        })
        
        for _, tabIco in pairs(TabBtns:GetChildren()) do
            if tabIco:IsA("ImageLabel") and tabIco:FindFirstChild("TabText") then
                tabIco.TabText.TextColor3 = self.uiSettings.textColor
                tabIco.TabText.TextSize = self.uiSettings.tabTextSize * self.uiSettings.uiSize
            end
        end
        
        for _, tab in pairs(TabMain:GetChildren()) do
            if tab:IsA("ScrollingFrame") then
                for _, section in pairs(tab:GetChildren()) do
                    if section:IsA("Frame") and section:FindFirstChild("SectionText") then
                        section.SectionText.TextColor3 = self.uiSettings.textColor
                        section.SectionText.TextSize = self.uiSettings.sectionTextSize * self.uiSettings.uiSize
                        
                        section.BackgroundColor3 = self.uiSettings.controlColor
                        section.BackgroundTransparency = self.uiSettings.controlTransparency
                        
                        local sectionCorner = section:FindFirstChild("SectionC")
                        if sectionCorner then
                            sectionCorner.CornerRadius = UDim.new(0, self.uiSettings.sectionCornerRadius * self.uiSettings.uiSize)
                        end
                        
                        if section:FindFirstChild("Objs") then
                            local objs = section.Objs
                            for _, obj in pairs(objs:GetChildren()) do
                                if obj:IsA("Frame") then
                                    for _, element in pairs(obj:GetChildren()) do
                                        if element:IsA("TextButton") or element:IsA("TextLabel") then
                                            if element.Name == "Btn" or element.Name == "ToggleBtn" or 
                                               element.Name == "KeybindBtn" or element.Name == "TextboxBack" or
                                               element.Name == "SliderBack" or element.Name == "DropdownTop" then
                                                element.BackgroundColor3 = self.uiSettings.controlColor
                                                element.BackgroundTransparency = self.uiSettings.controlTransparency
                                                
                                                local btnCorner = element:FindFirstChildOfClass("UICorner")
                                                if btnCorner then
                                                    btnCorner.CornerRadius = UDim.new(0, self.uiSettings.buttonCornerRadius * self.uiSettings.uiSize)
                                                end
                                            end
                                            
                                            if element:IsA("TextButton") then
                                                element.TextSize = self.uiSettings.buttonTextSize * self.uiSettings.uiSize
                                            elseif element:IsA("TextLabel") then
                                                element.TextSize = self.uiSettings.labelTextSize * self.uiSettings.uiSize
                                            end
                                            
                                            element.TextColor3 = self.uiSettings.textColor
                                        end
                                        
                                        if element:IsA("Frame") then
                                            for _, subElement in pairs(element:GetChildren()) do
                                                if subElement.Name == "ToggleDisable" or 
                                                   subElement.Name == "SliderBar" or
                                                   subElement.Name == "SliderValBG" or
                                                   subElement.Name == "BoxBG" or
                                                   subElement.Name == "KeybindValue" then
                                                    subElement.BackgroundColor3 = self.uiSettings.backgroundColor
                                                    subElement.BackgroundTransparency = self.uiSettings.backgroundColorTransparency
                                                    
                                                    local subCorner = subElement:FindFirstChildOfClass("UICorner")
                                                    if subCorner then
                                                        if subElement.Name == "SliderBar" then
                                                            subCorner.CornerRadius = UDim.new(0, self.uiSettings.sliderCornerRadius * self.uiSettings.uiSize)
                                                        else
                                                            subCorner.CornerRadius = UDim.new(0, self.uiSettings.buttonCornerRadius * self.uiSettings.uiSize)
                                                        end
                                                    end
                                                elseif subElement:IsA("TextBox") then
                                                    subElement.TextSize = self.uiSettings.textboxTextSize * self.uiSettings.uiSize
                                                    subElement.TextColor3 = self.uiSettings.textColor
                                                    subElement.PlaceholderColor3 = self.uiSettings.placeholderColor
                                                elseif subElement:IsA("TextLabel") then
                                                    subElement.TextSize = self.uiSettings.labelTextSize * self.uiSettings.uiSize
                                                    subElement.TextColor3 = self.uiSettings.textColor
                                                end
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    
    Main.Name = "Main"
    Main.Parent = dogent
    Main.AnchorPoint = Vector2.new(0.5, 0.5)
    Main.BackgroundColor3 = self.uiSettings.backgroundColor
    Main.BackgroundTransparency = self.uiSettings.backgroundColorTransparency
    Main.BorderColor3 = self.uiSettings.mainColor
    Main.Position = UDim2.new(0.5, 0, 0.5, 0)
    Main.Size = UDim2.new(0, 572 * self.uiSettings.uiSize, 0, 353 * self.uiSettings.uiSize)
    Main.ZIndex = 1
    Main.Active = true
    Main.Draggable = true
    
    BackgroundImage.Name = "BackgroundImage"
    BackgroundImage.Parent = Main
    BackgroundImage.BackgroundTransparency = 1
    BackgroundImage.Size = UDim2.new(1, 0, 1, 0)
    BackgroundImage.ZIndex = 0
    BackgroundImage.Visible = false
    
    services.UserInputService.InputEnded:Connect(function(input)
        if input.KeyCode == Enum.KeyCode.LeftControl then
            if Main.Visible == true then
                Main.Visible = false
            else
                Main.Visible = true
            end
        end
    end)
    
    drag(Main)
    UICornerMain.Parent = Main
    UICornerMain.CornerRadius = UDim.new(0, self.uiSettings.cornerRadius * self.uiSettings.uiSize)
    
    DropShadowHolder.Name = "DropShadowHolder"
    DropShadowHolder.Parent = Main
    DropShadowHolder.BackgroundTransparency = 1.000
    DropShadowHolder.BorderSizePixel = 0
    DropShadowHolder.Size = UDim2.new(1, 0, 1, 0)
    DropShadowHolder.BorderColor3 = Color3.fromRGB(255, 255, 255)
    DropShadowHolder.ZIndex = 0
    
    DropShadow.Name = "DropShadow"
    DropShadow.Parent = DropShadowHolder
    DropShadow.AnchorPoint = Vector2.new(0.5, 0.5)
    DropShadow.BackgroundTransparency = 1.000
    DropShadow.BorderSizePixel = 0
    DropShadow.Position = UDim2.new(0.5, 0, 0.5, 0)
    DropShadow.Size = UDim2.new(1, 43, 1, 43)
    DropShadow.ZIndex = 0
    DropShadow.Image = "rbxassetid://6015897843"
    DropShadow.ImageColor3 = Color3.fromRGB(255, 255, 255)
    DropShadow.ImageTransparency = 0.500
    DropShadow.ScaleType = Enum.ScaleType.Slice
    DropShadow.SliceCenter = Rect.new(49, 49, 450, 450)
    
    UIGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0.00, Color3.fromRGB(52, 152, 219)),
        ColorSequenceKeypoint.new(0.25, Color3.fromRGB(41, 128, 185)),
        ColorSequenceKeypoint.new(0.50, Color3.fromRGB(31, 97, 141)),
        ColorSequenceKeypoint.new(0.75, Color3.fromRGB(21, 67, 96)),
        ColorSequenceKeypoint.new(1.00, Color3.fromRGB(52, 152, 219))
    })
    UIGradient.Parent = DropShadow
    
    local TweenService = game:GetService("TweenService")
    local tweeninfo = TweenInfo.new(7, Enum.EasingStyle.Linear, Enum.EasingDirection.In, -1)
    local tween = TweenService:Create(UIGradient, tweeninfo, { Rotation = 360 })
    tween:Play()
    
    function toggleui()
        toggled = not toggled
        spawn(function()
            if toggled then
                wait(0.3)
            end
        end)
        Tween(Main, { 0.3, "Sine", "InOut" }, { Size = UDim2.new(0, 609, 0, (toggled and 505 or 0)) })
    end
    
    TabMain.Name = "TabMain"
    TabMain.Parent = Main
    TabMain.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    TabMain.BackgroundTransparency = 1.000
    TabMain.Position = UDim2.new(0.217000037, 0, 0, 3)
    TabMain.Size = UDim2.new(0, 448 * self.uiSettings.uiSize, 0, 353 * self.uiSettings.uiSize)
    
    MainC.CornerRadius = UDim.new(0, 5.5)
    MainC.Name = "MainC"
    MainC.Parent = Main
    
    SB.Name = "SB"
    SB.Parent = Main
    SB.BackgroundColor3 = self.uiSettings.backgroundColor
    SB.BackgroundTransparency = self.uiSettings.backgroundColorTransparency
    SB.BorderColor3 = self.uiSettings.mainColor
    SB.Size = UDim2.new(0, 8 * self.uiSettings.uiSize, 0, 353 * self.uiSettings.uiSize)
    
    SBC.CornerRadius = UDim.new(0, self.uiSettings.cornerRadius * self.uiSettings.uiSize)
    SBC.Name = "SBC"
    SBC.Parent = SB
    
    Side.Name = "Side"
    Side.Parent = SB
    Side.BackgroundColor3 = self.uiSettings.backgroundColor
    Side.BackgroundTransparency = self.uiSettings.backgroundColorTransparency
    Side.BorderColor3 = Color3.fromRGB(255, 255, 255)
    Side.BorderSizePixel = 0
    Side.ClipsDescendants = true
    Side.Position = UDim2.new(1, 0, 0, 0)
    Side.Size = UDim2.new(0, 110 * self.uiSettings.uiSize, 0, 353 * self.uiSettings.uiSize)
    
    SideG.Color =
        ColorSequence.new({ ColorSequenceKeypoint.new(0.00, self.uiSettings.controlColor), ColorSequenceKeypoint.new(1.00, self.uiSettings.controlColor) })
    SideG.Rotation = 90
    SideG.Name = "SideG"
    SideG.Parent = Side
    
    TabBtns.Name = "TabBtns"
    TabBtns.Parent = Side
    TabBtns.Active = true
    TabBtns.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    TabBtns.BackgroundTransparency = 1.000
    TabBtns.BorderSizePixel = 0
    TabBtns.Position = UDim2.new(0, 0, 0.0973535776, 0)
    TabBtns.Size = UDim2.new(0, 110 * self.uiSettings.uiSize, 0, 318 * self.uiSettings.uiSize)
    TabBtns.CanvasSize = UDim2.new(0, 0, 1, 0)
    TabBtns.ScrollBarThickness = 0
    
    TabBtnsL.Name = "TabBtnsL"
    TabBtnsL.Parent = TabBtns
    TabBtnsL.SortOrder = Enum.SortOrder.LayoutOrder
    TabBtnsL.Padding = UDim.new(0, 12 * self.uiSettings.uiSize)
    
    ScriptTitle.Name = "ScriptTitle"
    ScriptTitle.Parent = Side
    ScriptTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    ScriptTitle.BackgroundTransparency = 1.000
    ScriptTitle.Position = UDim2.new(0, 0, 0.00953488424, 0)
    ScriptTitle.Size = UDim2.new(0, 102 * self.uiSettings.uiSize, 0, 20 * self.uiSettings.uiSize)
    ScriptTitle.Font = Enum.Font.GothamBlack
    ScriptTitle.Text = "黑洞UI"
    ScriptTitle.TextColor3 = self.uiSettings.textColor
    ScriptTitle.TextSize = self.uiSettings.titleTextSize * self.uiSettings.uiSize
    ScriptTitle.TextTransparency = 0
    ScriptTitle.TextScaled = true
    ScriptTitle.TextXAlignment = Enum.TextXAlignment.Left
    
    UIGradientTitle.Parent = ScriptTitle
    
    local function NPLHKB_fake_script()
        local script = Instance.new("LocalScript", ScriptTitle)
        local button = script.Parent
        local gradient = button.UIGradient
        local ts = game:GetService("TweenService")
        local ti = TweenInfo.new(1, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
        local offset = { Offset = Vector2.new(1, 0) }
        local create = ts:Create(gradient, ti, offset)
        local startingPos = Vector2.new(-1, 0)
        local list = {}
        local s, kpt = ColorSequence.new, ColorSequenceKeypoint.new
        local counter = 0
        local status = "down"
        gradient.Offset = startingPos
        local function rainbowColors()
            local sat, val = 255, 255
            for i = 1, 10 do
                local hue = i * 17
                table.insert(list, Color3.fromHSV(hue / 255, sat / 255, val / 255))
            end
        end
        rainbowColors()
        gradient.Color = s({ kpt(0, list[#list]), kpt(0.5, list[#list - 1]), kpt(1, list[#list - 2]) })
        counter = #list
        local function animate()
            create:Play()
            create.Completed:Wait()
            gradient.Offset = startingPos
            gradient.Rotation = 180
            if counter == #list - 1 and status == "down" then
                gradient.Color =
                    s({ kpt(0, gradient.Color.Keypoints[1].Value), kpt(0.5, list[#list]), kpt(1, list[1]) })
                counter = 1
                status = "up"
            elseif counter == #list and status == "down" then
                gradient.Color = s({ kpt(0, gradient.Color.Keypoints[1].Value), kpt(0.5, list[1]), kpt(1, list[2]) })
                counter = 2
                status = "up"
            elseif counter <= #list - 2 and status == "down" then
                gradient.Color = s({
                    kpt(0, gradient.Color.Keypoints[1].Value),
                    kpt(0.5, list[counter + 1]),
                    kpt(1, list[counter + 2]),
                })
                counter = counter + 2
                status = "up"
            end
            create:Play()
            create.Completed:Wait()
            gradient.Offset = startingPos
            gradient.Rotation = 0
            if counter == #list - 1 and status == "up" then
                gradient.Color =
                    s({ kpt(0, list[1]), kpt(0.5, list[#list]), kpt(1, gradient.Color.Keypoints[3].Value) })
                counter = 1
                status = "down"
            elseif counter == #list and status == "up" then
                gradient.Color = s({ kpt(0, list[2]), kpt(0.5, list[1]), kpt(1, gradient.Color.Keypoints[3].Value) })
                counter = 2
                status = "down"
            elseif counter <= #list - 2 and status == "up" then
                gradient.Color = s({
                    kpt(0, list[counter + 2]),
                    kpt(0.5, list[counter + 1]),
                    kpt(1, gradient.Color.Keypoints[3].Value),
                })
                counter = counter + 2
                status = "down"
            end
            animate()
        end
        animate()
    end
    coroutine.wrap(NPLHKB_fake_script)()
    
    SBG.Color =
        ColorSequence.new({ ColorSequenceKeypoint.new(0.00, self.uiSettings.controlColor), ColorSequenceKeypoint.new(1.00, self.uiSettings.controlColor) })
    SBG.Rotation = 90
    SBG.Name = "SBG"
    SBG.Parent = SB
    
    TabBtnsL:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        TabBtns.CanvasSize = UDim2.new(0, 0, 0, TabBtnsL.AbsoluteContentSize.Y + 18)
    end)
    
    Open.Name = "Open"
    Open.Parent = dogent
    Open.BackgroundColor3 = self.uiSettings.backgroundColor
    Open.BackgroundTransparency = self.uiSettings.backgroundColorTransparency
    Open.Position = UDim2.new(0.00829315186, 0, 0.31107837, 0)
    Open.Size = UDim2.new(0, self.uiSettings.minimizeSize.X.Offset * self.uiSettings.uiSize, 
                            0, self.uiSettings.minimizeSize.Y.Offset * self.uiSettings.uiSize)
    Open.Font = Enum.Font.GothamBold
    Open.Text = "黑洞中心"
    Open.TextColor3 = self.uiSettings.textColor
    Open.TextTransparency = 0
    Open.TextSize = 14.000 * self.uiSettings.uiSize
    Open.Active = true
    Open.Draggable = true
    Open.ZIndex = 100
    OpenCorner.Parent = Open
    if self.uiSettings.minimizeShape == "PureCircle" then
        local size = math.min(self.uiSettings.minimizeSize.X.Offset, self.uiSettings.minimizeSize.Y.Offset) * self.uiSettings.uiSize
        Open.Size = UDim2.new(0, size, 0, size)
        OpenCorner.CornerRadius = UDim.new(1, 0)
    elseif self.uiSettings.minimizeShape == "Circle" then
        OpenCorner.CornerRadius = UDim.new(0.5, 0)
    elseif self.uiSettings.minimizeShape == "Rounded" then
        OpenCorner.CornerRadius = UDim.new(0, 8 * self.uiSettings.uiSize)
    else
        OpenCorner.CornerRadius = UDim.new(0, 0)
    end
    UIG.Parent = Open
    Open.MouseButton1Click:Connect(function()
        Main.Visible = not Main.Visible
    end)
    
    local window = {}
    
    function window.Tab(window, name, icon)
        local Tab = Instance.new("ScrollingFrame")
        local TabIco = Instance.new("ImageLabel")
        local TabText = Instance.new("TextLabel")
        local TabBtn = Instance.new("TextButton")
        local TabL = Instance.new("UIListLayout")
        
        Tab.Name = "Tab"
        Tab.Parent = TabMain
        Tab.Active = true
        Tab.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        Tab.BackgroundTransparency = 1.000
        Tab.Size = UDim2.new(1, 0, 1, 0)
        Tab.ScrollBarThickness = 2 * self.uiSettings.uiSize
        Tab.Visible = false
        
        TabIco.Name = "TabIco"
        TabIco.Parent = TabBtns
        TabIco.BackgroundTransparency = 1.000
        TabIco.BorderSizePixel = 0
        TabIco.Size = UDim2.new(0, 24 * self.uiSettings.uiSize, 0, 24 * self.uiSettings.uiSize)
        TabIco.Image = ("rbxassetid://%s"):format((icon or 4370341699))
        TabIco.ImageTransparency = 0.2
        
        TabText.Name = "TabText"
        TabText.Parent = TabIco
        TabText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        TabText.BackgroundTransparency = 1.000
        TabText.Position = UDim2.new(1.41666663, 0, 0, 0)
        TabText.Size = UDim2.new(0, 76 * self.uiSettings.uiSize, 0, 24 * self.uiSettings.uiSize)
        TabText.Font = Enum.Font.GothamSemibold
        TabText.Text = name
        TabText.TextColor3 = self.uiSettings.textColor
        TabText.TextSize = self.uiSettings.tabTextSize * self.uiSettings.uiSize
        TabText.TextTransparency = 0.2
        TabText.TextXAlignment = Enum.TextXAlignment.Left
        
        TabBtn.Name = "TabBtn"
        TabBtn.Parent = TabIco
        TabBtn.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        TabBtn.BackgroundTransparency = 1.000
        TabBtn.BorderSizePixel = 0
        TabBtn.Size = UDim2.new(0, 110 * self.uiSettings.uiSize, 0, 24 * self.uiSettings.uiSize)
        TabBtn.AutoButtonColor = false
        TabBtn.Font = Enum.Font.SourceSans
        TabBtn.Text = ""
        TabBtn.TextColor3 = Color3.fromRGB(0, 0, 0)
        TabBtn.TextSize = 14.000
        
        TabL.Name = "TabL"
        TabL.Parent = Tab
        TabL.SortOrder = Enum.SortOrder.LayoutOrder
        TabL.Padding = UDim.new(0, 4 * self.uiSettings.uiSize)
        
        TabBtn.MouseButton1Click:Connect(function()
            spawn(function()
                Ripple(TabBtn)
            end)
            switchTab({ TabIco, Tab })
        end)
        
        if self.currentTab == nil then
            switchTab({ TabIco, Tab })
        end
        
        TabL:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            Tab.CanvasSize = UDim2.new(0, 0, 0, TabL.AbsoluteContentSize.Y + 8 * self.uiSettings.uiSize)
        end)
        
        local tab = {}
        
        function tab.section(tab, name, TabVal)
            local Section = Instance.new("Frame")
            local SectionC = Instance.new("UICorner")
            local SectionText = Instance.new("TextLabel")
            local SectionOpen = Instance.new("ImageLabel")
            local SectionOpened = Instance.new("ImageLabel")
            local SectionToggle = Instance.new("ImageButton")
            local Objs = Instance.new("Frame")
            local ObjsL = Instance.new("UIListLayout")
            
            Section.Name = "Section"
            Section.Parent = Tab
            Section.BackgroundColor3 = self.uiSettings.controlColor
            Section.BackgroundTransparency = self.uiSettings.controlTransparency
            Section.BorderSizePixel = 0
            Section.ClipsDescendants = true
            Section.Size = UDim2.new(0.981000006, 0, 0, 36 * self.uiSettings.uiSize)
            
            SectionC.CornerRadius = UDim.new(0, self.uiSettings.sectionCornerRadius * self.uiSettings.uiSize)
            SectionC.Name = "SectionC"
            SectionC.Parent = Section
            
            SectionText.Name = "SectionText"
            SectionText.Parent = Section
            SectionText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            SectionText.BackgroundTransparency = 1.000
            SectionText.Position = UDim2.new(0.0887396261, 0, 0, 0)
            SectionText.Size = UDim2.new(0, 401 * self.uiSettings.uiSize, 0, 36 * self.uiSettings.uiSize)
            SectionText.Font = Enum.Font.GothamBold
            SectionText.Text = name
            SectionText.TextColor3 = self.uiSettings.textColor
            SectionText.TextSize = self.uiSettings.sectionTextSize * self.uiSettings.uiSize
            SectionText.TextTransparency = 0
            SectionText.TextXAlignment = Enum.TextXAlignment.Left
            
            SectionOpen.Name = "SectionOpen"
            SectionOpen.Parent = SectionText
            SectionOpen.BackgroundTransparency = 1
            SectionOpen.BorderSizePixel = 0
            SectionOpen.Position = UDim2.new(0, -33 * self.uiSettings.uiSize, 0, 5 * self.uiSettings.uiSize)
            SectionOpen.Size = UDim2.new(0, 26 * self.uiSettings.uiSize, 0, 26 * self.uiSettings.uiSize)
            SectionOpen.Image = "http://www.roblox.com/asset/?id=6031302934"
            
            SectionOpened.Name = "SectionOpened"
            SectionOpened.Parent = SectionOpen
            SectionOpened.BackgroundTransparency = 1.000
            SectionOpened.BorderSizePixel = 0
            SectionOpened.Size = UDim2.new(0, 26 * self.uiSettings.uiSize, 0, 26 * self.uiSettings.uiSize)
            SectionOpened.Image = "http://www.roblox.com/asset/?id=6031302932"
            SectionOpened.ImageTransparency = 1.000
            
            SectionToggle.Name = "SectionToggle"
            SectionToggle.Parent = SectionOpen
            SectionToggle.BackgroundTransparency = 1
            SectionToggle.BorderSizePixel = 0
            SectionToggle.Size = UDim2.new(0, 26 * self.uiSettings.uiSize, 0, 26 * self.uiSettings.uiSize)
            
            Objs.Name = "Objs"
            Objs.Parent = Section
            Objs.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Objs.BackgroundTransparency = 1
            Objs.BorderSizePixel = 0
            Objs.Position = UDim2.new(0, 6 * self.uiSettings.uiSize, 0, 36 * self.uiSettings.uiSize)
            Objs.Size = UDim2.new(0.986347735, 0, 0, 0)
            
            ObjsL.Name = "ObjsL"
            ObjsL.Parent = Objs
            ObjsL.SortOrder = Enum.SortOrder.LayoutOrder
            ObjsL.Padding = UDim.new(0, 8 * self.uiSettings.uiSize)
            
            local open = TabVal
            if TabVal ~= false then
                Section.Size = UDim2.new(0.981000006, 0, 0, open and 36 * self.uiSettings.uiSize + ObjsL.AbsoluteContentSize.Y + 8 * self.uiSettings.uiSize or 36 * self.uiSettings.uiSize)
                SectionOpened.ImageTransparency = (open and 0 or 1)
                SectionOpen.ImageTransparency = (open and 1 or 0)
            end
            
            SectionToggle.MouseButton1Click:Connect(function()
                open = not open
                Section.Size = UDim2.new(0.981000006, 0, 0, open and 36 * self.uiSettings.uiSize + ObjsL.AbsoluteContentSize.Y + 8 * self.uiSettings.uiSize or 36 * self.uiSettings.uiSize)
                SectionOpened.ImageTransparency = (open and 0 or 1)
                SectionOpen.ImageTransparency = (open and 1 or 0)
            end)
            
            ObjsL:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                if not open then
                    return
                end
                Section.Size = UDim2.new(0.981000006, 0, 0, 36 * self.uiSettings.uiSize + ObjsL.AbsoluteContentSize.Y + 8 * self.uiSettings.uiSize)
            end)
            
            local section = {}
            
            function section.Button(section, text, callback)
                local callback = callback or function() end
                local BtnModule = Instance.new("Frame")
                local Btn = Instance.new("TextButton")
                local BtnC = Instance.new("UICorner")
                
                BtnModule.Name = "BtnModule"
                BtnModule.Parent = Objs
                BtnModule.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                BtnModule.BackgroundTransparency = 1.000
                BtnModule.BorderSizePixel = 0
                BtnModule.Position = UDim2.new(0, 0, 0, 0)
                BtnModule.Size = UDim2.new(0, 428 * self.uiSettings.uiSize, 0, 38 * self.uiSettings.uiSize)
                
                Btn.Name = "Btn"
                Btn.Parent = BtnModule
                Btn.BackgroundColor3 = self.uiSettings.controlColor
                Btn.BackgroundTransparency = self.uiSettings.controlTransparency
                Btn.BorderSizePixel = 0
                Btn.Size = UDim2.new(0, 428 * self.uiSettings.uiSize, 0, 38 * self.uiSettings.uiSize)
                Btn.AutoButtonColor = false
                Btn.Font = Enum.Font.GothamBold
                Btn.Text = "   " .. text
                Btn.TextColor3 = self.uiSettings.textColor
                Btn.TextSize = self.uiSettings.buttonTextSize * self.uiSettings.uiSize
                Btn.TextTransparency = 0
                Btn.TextXAlignment = Enum.TextXAlignment.Left
                
                BtnC.CornerRadius = UDim.new(0, self.uiSettings.buttonCornerRadius * self.uiSettings.uiSize)
                BtnC.Name = "BtnC"
                BtnC.Parent = Btn
                
                local funcs = {}
                
                Btn.MouseButton1Click:Connect(function()
                    spawn(function()
                        Ripple(Btn)
                    end)
                    spawn(callback)
                end)
                
                return funcs
            end
            
            function section:Label(text)
                local LabelModule = Instance.new("Frame")
                local TextLabel = Instance.new("TextLabel")
                local LabelC = Instance.new("UICorner")
                
                LabelModule.Name = "LabelModule"
                LabelModule.Parent = Objs
                LabelModule.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                LabelModule.BackgroundTransparency = 1.000
                LabelModule.BorderSizePixel = 0
                LabelModule.Position = UDim2.new(0, 0, NAN, 0)
                LabelModule.Size = UDim2.new(0, 428 * self.uiSettings.uiSize, 0, 19 * self.uiSettings.uiSize)
                
                TextLabel.Parent = LabelModule
                TextLabel.BackgroundColor3 = self.uiSettings.controlColor
                TextLabel.BackgroundTransparency = self.uiSettings.controlTransparency
                TextLabel.Size = UDim2.new(0, 428 * self.uiSettings.uiSize, 0, 22 * self.uiSettings.uiSize)
                TextLabel.Font = Enum.Font.GothamBold
                TextLabel.Text = text
                TextLabel.TextColor3 = self.uiSettings.textColor
                TextLabel.TextSize = self.uiSettings.labelTextSize * self.uiSettings.uiSize
                TextLabel.TextTransparency = 0
                
                LabelC.CornerRadius = UDim.new(0, self.uiSettings.buttonCornerRadius * self.uiSettings.uiSize)
                LabelC.Name = "LabelC"
                LabelC.Parent = TextLabel
                
                return TextLabel
            end
            
            function section.Toggle(section, text, flag, enabled, callback)
                local callback = callback or function() end
                local enabled = enabled or false
                assert(text, "No text provided")
                assert(flag, "No flag provided")
                self.flags[flag] = enabled
                
                local ToggleModule = Instance.new("Frame")
                local ToggleBtn = Instance.new("TextButton")
                local ToggleBtnC = Instance.new("UICorner")
                local ToggleDisable = Instance.new("Frame")
                local ToggleSwitch = Instance.new("Frame")
                local ToggleSwitchC = Instance.new("UICorner")
                local ToggleDisableC = Instance.new("UICorner")
                
                ToggleModule.Name = "ToggleModule"
                ToggleModule.Parent = Objs
                ToggleModule.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                ToggleModule.BackgroundTransparency = 1.000
                ToggleModule.BorderSizePixel = 0
                ToggleModule.Position = UDim2.new(0, 0, 0, 0)
                ToggleModule.Size = UDim2.new(0, 428 * self.uiSettings.uiSize, 0, 38 * self.uiSettings.uiSize)
                
                ToggleBtn.Name = "ToggleBtn"
                ToggleBtn.Parent = ToggleModule
                ToggleBtn.BackgroundColor3 = self.uiSettings.controlColor
                ToggleBtn.BackgroundTransparency = self.uiSettings.controlTransparency
                ToggleBtn.BorderSizePixel = 0
                ToggleBtn.Size = UDim2.new(0, 428 * self.uiSettings.uiSize, 0, 38 * self.uiSettings.uiSize)
                ToggleBtn.AutoButtonColor = false
                ToggleBtn.Font = Enum.Font.GothamBold
                ToggleBtn.Text = "   " .. text
                ToggleBtn.TextColor3 = self.uiSettings.textColor
                ToggleBtn.TextSize = self.uiSettings.buttonTextSize * self.uiSettings.uiSize
                ToggleBtn.TextTransparency = 0
                ToggleBtn.TextXAlignment = Enum.TextXAlignment.Left
                
                ToggleBtnC.CornerRadius = UDim.new(0, self.uiSettings.buttonCornerRadius * self.uiSettings.uiSize)
                ToggleBtnC.Name = "ToggleBtnC"
                ToggleBtnC.Parent = ToggleBtn
                
                ToggleDisable.Name = "ToggleDisable"
                ToggleDisable.Parent = ToggleBtn
                ToggleDisable.BackgroundColor3 = self.uiSettings.backgroundColor
                ToggleDisable.BackgroundTransparency = self.uiSettings.backgroundColorTransparency
                ToggleDisable.BorderSizePixel = 0
                ToggleDisable.Position = UDim2.new(0.901869178, 0, 0.208881587, 0)
                ToggleDisable.Size = UDim2.new(0, 36 * self.uiSettings.uiSize, 0, 22 * self.uiSettings.uiSize)
                
                ToggleSwitch.Name = "ToggleSwitch"
                ToggleSwitch.Parent = ToggleDisable
                ToggleSwitch.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                ToggleSwitch.Size = UDim2.new(0, 24 * self.uiSettings.uiSize, 0, 22 * self.uiSettings.uiSize)
                
                ToggleSwitchC.CornerRadius = UDim.new(0, self.uiSettings.buttonCornerRadius * self.uiSettings.uiSize)
                ToggleSwitchC.Name = "ToggleSwitchC"
                ToggleSwitchC.Parent = ToggleSwitch
                
                ToggleDisableC.CornerRadius = UDim.new(0, self.uiSettings.buttonCornerRadius * self.uiSettings.uiSize)
                ToggleDisableC.Name = "ToggleDisableC"
                ToggleDisableC.Parent = ToggleDisable
                
                local funcs = {
                    SetState = function(self, state)
                        if state == nil then
                            state = not self.flags[flag]
                        end
                        if self.flags[flag] == state then
                            return
                        end
                        services.TweenService
                            :Create(
                                ToggleSwitch,
                                TweenInfo.new(0.2),
                                {
                                    Position = UDim2.new(0, (state and ToggleSwitch.Size.X.Offset / 2 or 0), 0, 0),
                                    BackgroundColor3 = (state and Color3.fromRGB(255, 255, 255) or Color3.fromRGB(255, 255, 255)),
                                }
                            )
                            :Play()
                        self.flags[flag] = state
                        callback(state)
                    end,
                    Module = ToggleModule
                }
                
                if not self.components then self.components = {} end
                self.components[flag] = funcs
                
                if enabled ~= false then
                    funcs:SetState(flag, true)
                end
                
                ToggleBtn.MouseButton1Click:Connect(function()
                    funcs:SetState()
                end)
                
                return funcs
            end
            
            function section.Keybind(section, text, default, callback)
                local callback = callback or function() end
                assert(text, "No text provided")
                assert(default, "No default key provided")
                local default = (typeof(default) == "string" and Enum.KeyCode[default] or default)
                local banned = {
                    Return = true,
                    Space = true,
                    Tab = true,
                    Backquote = true,
                    CapsLock = true,
                    Escape = true,
                    Unknown = true,
                }
                local shortNames = {
                    RightControl = "Right Ctrl",
                    LeftControl = "Left Ctrl",
                    LeftShift = "Left Shift",
                    RightShift = "Right Shift",
                    Semicolon = ";",
                    Quote = '"',
                    LeftBracket = "[",
                    RightBracket = "]",
                    Equals = "=",
                    Minus = "-",
                    RightAlt = "Right Alt",
                    LeftAlt = "Left Alt",
                }
                local bindKey = default
                local keyTxt = (default and (shortNames[default.Name] or default.Name) or "None")
                local flag = "keybind_" .. text
                
                local KeybindModule = Instance.new("Frame")
                local KeybindBtn = Instance.new("TextButton")
                local KeybindBtnC = Instance.new("UICorner")
                local KeybindValue = Instance.new("TextButton")
                local KeybindValueC = Instance.new("UICorner")
                local KeybindL = Instance.new("UIListLayout")
                local UIPadding = Instance.new("UIPadding")
                
                KeybindModule.Name = "KeybindModule"
                KeybindModule.Parent = Objs
                KeybindModule.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                KeybindModule.BackgroundTransparency = 1.000
                KeybindModule.BorderSizePixel = 0
                KeybindModule.Position = UDim2.new(0, 0, 0, 0)
                KeybindModule.Size = UDim2.new(0, 428 * self.uiSettings.uiSize, 0, 38 * self.uiSettings.uiSize)
                
                KeybindBtn.Name = "KeybindBtn"
                KeybindBtn.Parent = KeybindModule
                KeybindBtn.BackgroundColor3 = self.uiSettings.controlColor
                KeybindBtn.BackgroundTransparency = self.uiSettings.controlTransparency
                KeybindBtn.BorderSizePixel = 0
                KeybindBtn.Size = UDim2.new(0, 428 * self.uiSettings.uiSize, 0, 38 * self.uiSettings.uiSize)
                KeybindBtn.AutoButtonColor = false
                KeybindBtn.Font = Enum.Font.GothamBold
                KeybindBtn.Text = "   " .. text
                KeybindBtn.TextColor3 = self.uiSettings.textColor
                KeybindBtn.TextSize = self.uiSettings.buttonTextSize * self.uiSettings.uiSize
                KeybindBtn.TextTransparency = 0
                KeybindBtn.TextXAlignment = Enum.TextXAlignment.Left
                
                KeybindBtnC.CornerRadius = UDim.new(0, self.uiSettings.buttonCornerRadius * self.uiSettings.uiSize)
                KeybindBtnC.Name = "KeybindBtnC"
                KeybindBtnC.Parent = KeybindBtn
                
                KeybindValue.Name = "KeybindValue"
                KeybindValue.Parent = KeybindBtn
                KeybindValue.BackgroundColor3 = self.uiSettings.backgroundColor
                KeybindValue.BackgroundTransparency = self.uiSettings.backgroundColorTransparency
                KeybindValue.BorderSizePixel = 0
                KeybindValue.Position = UDim2.new(0.763033211, 0, 0.289473683, 0)
                KeybindValue.Size = UDim2.new(0, 100 * self.uiSettings.uiSize, 0, 28 * self.uiSettings.uiSize)
                KeybindValue.AutoButtonColor = false
                KeybindValue.Font = Enum.Font.GothamBold
                KeybindValue.Text = keyTxt
                KeybindValue.TextColor3 = self.uiSettings.textColor
                KeybindValue.TextSize = self.uiSettings.buttonTextSize * self.uiSettings.uiSize
                KeybindValue.TextTransparency = 0
                
                KeybindValueC.CornerRadius = UDim.new(0, self.uiSettings.buttonCornerRadius * self.uiSettings.uiSize)
                KeybindValueC.Name = "KeybindValueC"
                KeybindValueC.Parent = KeybindValue
                
                KeybindL.Name = "KeybindL"
                KeybindL.Parent = KeybindBtn
                KeybindL.HorizontalAlignment = Enum.HorizontalAlignment.Right
                KeybindL.SortOrder = Enum.SortOrder.LayoutOrder
                KeybindL.VerticalAlignment = Enum.VerticalAlignment.Center
                
                UIPadding.Parent = KeybindBtn
                UIPadding.PaddingRight = UDim.new(0, 6 * self.uiSettings.uiSize)
                
                local funcs = {}
                
                funcs.Set = function(self, value)
                    if typeof(value) == "string" then
                        value = Enum.KeyCode[value]
                    end
                    if value and not banned[value.Name] then
                        bindKey = value
                        KeybindValue.Text = shortNames[value.Name] or value.Name
                    end
                end
                
                if not self.components then self.components = {} end
                self.components[flag] = funcs
                
                services.UserInputService.InputBegan:Connect(function(inp, gpe)
                    if gpe then
                        return
                    end
                    if inp.UserInputType ~= Enum.UserInputType.Keyboard then
                        return
                    end
                    if inp.KeyCode ~= bindKey then
                        return
                    end
                    callback(bindKey.Name)
                end)
                
                KeybindValue.MouseButton1Click:Connect(function()
                    KeybindValue.Text = "..."
                    wait()
                    local key, uwu = services.UserInputService.InputEnded:Wait()
                    local keyName = tostring(key.KeyCode.Name)
                    if key.UserInputType ~= Enum.UserInputType.Keyboard then
                        KeybindValue.Text = keyTxt
                        return
                    end
                    if banned[keyName] then
                        KeybindValue.Text = keyTxt
                        return
                    end
                    wait()
                    bindKey = Enum.KeyCode[keyName]
                    KeybindValue.Text = shortNames[keyName] or keyName
                end)
                
                KeybindValue:GetPropertyChangedSignal("TextBounds"):Connect(function()
                    KeybindValue.Size = UDim2.new(0, KeybindValue.TextBounds.X + 30 * self.uiSettings.uiSize, 0, 28 * self.uiSettings.uiSize)
                end)
                
                KeybindValue.Size = UDim2.new(0, KeybindValue.TextBounds.X + 30 * self.uiSettings.uiSize, 0, 28 * self.uiSettings.uiSize)
                
                return funcs
            end
            
            function section.Textbox(section, text, flag, default, callback)
                local callback = callback or function() end
                assert(text, "No text provided")
                assert(flag, "No flag provided")
                assert(default, "No default text provided")
                self.flags[flag] = default
                
                local TextboxModule = Instance.new("Frame")
                local TextboxBack = Instance.new("TextButton")
                local TextboxBackC = Instance.new("UICorner")
                local BoxBG = Instance.new("TextButton")
                local BoxBGC = Instance.new("UICorner")
                local TextBox = Instance.new("TextBox")
                local TextboxBackL = Instance.new("UIListLayout")
                local TextboxBackP = Instance.new("UIPadding")
                
                TextboxModule.Name = "TextboxModule"
                TextboxModule.Parent = Objs
                TextboxModule.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                TextboxModule.BackgroundTransparency = 1.000
                TextboxModule.BorderSizePixel = 0
                TextboxModule.Position = UDim2.new(0, 0, 0, 0)
                TextboxModule.Size = UDim2.new(0, 428 * self.uiSettings.uiSize, 0, 38 * self.uiSettings.uiSize)
                
                TextboxBack.Name = "TextboxBack"
                TextboxBack.Parent = TextboxModule
                TextboxBack.BackgroundColor3 = self.uiSettings.controlColor
                TextboxBack.BackgroundTransparency = self.uiSettings.controlTransparency
                TextboxBack.BorderSizePixel = 0
                TextboxBack.Size = UDim2.new(0, 428 * self.uiSettings.uiSize, 0, 38 * self.uiSettings.uiSize)
                TextboxBack.AutoButtonColor = false
                TextboxBack.Font = Enum.Font.GothamBold
                TextboxBack.Text = "   " .. text
                TextboxBack.TextColor3 = self.uiSettings.textColor
                TextboxBack.TextSize = self.uiSettings.buttonTextSize * self.uiSettings.uiSize
                TextboxBack.TextTransparency = 0
                TextboxBack.TextXAlignment = Enum.TextXAlignment.Left
                
                TextboxBackC.CornerRadius = UDim.new(0, self.uiSettings.buttonCornerRadius * self.uiSettings.uiSize)
                TextboxBackC.Name = "TextboxBackC"
                TextboxBackC.Parent = TextboxBack
                
                BoxBG.Name = "BoxBG"
                BoxBG.Parent = TextboxBack
                BoxBG.BackgroundColor3 = self.uiSettings.backgroundColor
                BoxBG.BackgroundTransparency = self.uiSettings.backgroundColorTransparency
                BoxBG.BorderSizePixel = 0
                BoxBG.Position = UDim2.new(0.763033211, 0, 0.289473683, 0)
                BoxBG.Size = UDim2.new(0, 100 * self.uiSettings.uiSize, 0, 28 * self.uiSettings.uiSize)
                BoxBG.AutoButtonColor = false
                BoxBG.Font = Enum.Font.Gotham
                BoxBG.Text = ""
                BoxBG.TextColor3 = Color3.fromRGB(255, 255, 255)
                BoxBG.TextSize = 14.000
                
                BoxBGC.CornerRadius = UDim.new(0, self.uiSettings.buttonCornerRadius * self.uiSettings.uiSize)
                BoxBGC.Name = "BoxBGC"
                BoxBGC.Parent = BoxBG
                
                TextBox.Parent = BoxBG
                TextBox.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                TextBox.BackgroundTransparency = 1.000
                TextBox.BorderSizePixel = 0
                TextBox.Size = UDim2.new(1, 0, 1, 0)
                TextBox.Font = Enum.Font.GothamBold
                TextBox.Text = default
                TextBox.TextColor3 = self.uiSettings.textColor
                TextBox.PlaceholderColor3 = self.uiSettings.placeholderColor
                TextBox.TextSize = self.uiSettings.textboxTextSize * self.uiSettings.uiSize
                TextBox.TextTransparency = 0
                
                TextboxBackL.Name = "TextboxBackL"
                TextboxBackL.Parent = TextboxBack
                TextboxBackL.HorizontalAlignment = Enum.HorizontalAlignment.Right
                TextboxBackL.SortOrder = Enum.SortOrder.LayoutOrder
                TextboxBackL.VerticalAlignment = Enum.VerticalAlignment.Center
                
                TextboxBackP.Name = "TextboxBackP"
                TextboxBackP.Parent = TextboxBack
                TextboxBackP.PaddingRight = UDim.new(0, 6 * self.uiSettings.uiSize)
                
                local funcs = {}
                
                funcs.Set = function(self, value)
                    TextBox.Text = value
                    self.flags[flag] = value
                    callback(value)
                end
                
                if not self.components then self.components = {} end
                self.components[flag] = funcs
                
                TextBox.FocusLost:Connect(function()
                    if TextBox.Text == "" then
                        TextBox.Text = default
                    end
                    self.flags[flag] = TextBox.Text
                    callback(TextBox.Text)
                end)
                
                TextBox:GetPropertyChangedSignal("TextBounds"):Connect(function()
                    BoxBG.Size = UDim2.new(0, TextBox.TextBounds.X + 30 * self.uiSettings.uiSize, 0, 28 * self.uiSettings.uiSize)
                end)
                
                BoxBG.Size = UDim2.new(0, TextBox.TextBounds.X + 30 * self.uiSettings.uiSize, 0, 28 * self.uiSettings.uiSize)
                
                return funcs
            end
            
            function section.Slider(section, text, flag, default, min, max, precise, callback)
                local callback = callback or function() end
                local min = min or 1
                local max = max or 10
                local default = default or min
                local precise = precise or false
                self.flags[flag] = default
                assert(text, "No text provided")
                assert(flag, "No flag provided")
                assert(default, "No default value provided")
                
                local SliderModule = Instance.new("Frame")
                local SliderBack = Instance.new("TextButton")
                local SliderBackC = Instance.new("UICorner")
                local SliderBar = Instance.new("Frame")
                local SliderBarC = Instance.new("UICorner")
                local SliderPart = Instance.new("Frame")
                local SliderPartC = Instance.new("UICorner")
                local SliderValBG = Instance.new("TextButton")
                local SliderValBGC = Instance.new("UICorner")
                local SliderValue = Instance.new("TextBox")
                local MinSlider = Instance.new("TextButton")
                local AddSlider = Instance.new("TextButton")
                
                SliderModule.Name = "SliderModule"
                SliderModule.Parent = Objs
                SliderModule.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                SliderModule.BackgroundTransparency = 1.000
                SliderModule.BorderSizePixel = 0
                SliderModule.Position = UDim2.new(0, 0, 0, 0)
                SliderModule.Size = UDim2.new(0, 428 * self.uiSettings.uiSize, 0, 38 * self.uiSettings.uiSize)
                
                SliderBack.Name = "SliderBack"
                SliderBack.Parent = SliderModule
                SliderBack.BackgroundColor3 = self.uiSettings.controlColor
                SliderBack.BackgroundTransparency = self.uiSettings.controlTransparency
                SliderBack.BorderSizePixel = 0
                SliderBack.Size = UDim2.new(0, 428 * self.uiSettings.uiSize, 0, 38 * self.uiSettings.uiSize)
                SliderBack.AutoButtonColor = false
                SliderBack.Font = Enum.Font.GothamBold
                SliderBack.Text = "   " .. text
                SliderBack.TextColor3 = self.uiSettings.textColor
                SliderBack.TextSize = self.uiSettings.buttonTextSize * self.uiSettings.uiSize
                SliderBack.TextTransparency = 0
                SliderBack.TextXAlignment = Enum.TextXAlignment.Left
                
                SliderBackC.CornerRadius = UDim.new(0, self.uiSettings.buttonCornerRadius * self.uiSettings.uiSize)
                SliderBackC.Name = "SliderBackC"
                SliderBackC.Parent = SliderBack
                
                SliderBar.Name = "SliderBar"
                SliderBar.Parent = SliderBack
                SliderBar.AnchorPoint = Vector2.new(0, 0.5)
                SliderBar.BackgroundColor3 = self.uiSettings.backgroundColor
                SliderBar.BackgroundTransparency = self.uiSettings.backgroundColorTransparency
                SliderBar.BorderSizePixel = 0
                SliderBar.Position = UDim2.new(0.369000018, 40 * self.uiSettings.uiSize, 0.5, 0)
                SliderBar.Size = UDim2.new(0, 140 * self.uiSettings.uiSize, 0, 12 * self.uiSettings.uiSize)
                
                SliderBarC.CornerRadius = UDim.new(0, self.uiSettings.sliderCornerRadius * self.uiSettings.uiSize)
                SliderBarC.Name = "SliderBarC"
                SliderBarC.Parent = SliderBar
                
                SliderPart.Name = "SliderPart"
                SliderPart.Parent = SliderBar
                SliderPart.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                SliderPart.Size = UDim2.new(0, 54 * self.uiSettings.uiSize, 0, 13 * self.uiSettings.uiSize)
                
                SliderPartC.CornerRadius = UDim.new(0, self.uiSettings.sliderCornerRadius * self.uiSettings.uiSize)
                SliderPartC.Name = "SliderPartC"
                SliderPartC.Parent = SliderPart
                
                SliderValBG.Name = "SliderValBG"
                SliderValBG.Parent = SliderBack
                SliderValBG.BackgroundColor3 = self.uiSettings.backgroundColor
                SliderValBG.BackgroundTransparency = self.uiSettings.backgroundColorTransparency
                SliderValBG.BorderSizePixel = 0
                SliderValBG.Position = UDim2.new(0.883177578, 0, 0.131578952, 0)
                SliderValBG.Size = UDim2.new(0, 44 * self.uiSettings.uiSize, 0, 28 * self.uiSettings.uiSize)
                SliderValBG.AutoButtonColor = false
                SliderValBG.Font = Enum.Font.Gotham
                SliderValBG.Text = ""
                SliderValBG.TextColor3 = Color3.fromRGB(255, 255, 255)
                SliderValBG.TextSize = 14.000
                
                SliderValBGC.CornerRadius = UDim.new(0, self.uiSettings.buttonCornerRadius * self.uiSettings.uiSize)
                SliderValBGC.Name = "SliderValBGC"
                SliderValBGC.Parent = SliderValBG
                
                SliderValue.Name = "SliderValue"
                SliderValue.Parent = SliderValBG
                SliderValue.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                SliderValue.BackgroundTransparency = 1.000
                SliderValue.BorderSizePixel = 0
                SliderValue.Size = UDim2.new(1, 0, 1, 0)
                SliderValue.Font = Enum.Font.GothamBold
                SliderValue.Text = "1000"
                SliderValue.TextColor3 = self.uiSettings.textColor
                SliderValue.TextSize = self.uiSettings.sliderValueTextSize * self.uiSettings.uiSize
                SliderValue.TextTransparency = 0
                
                MinSlider.Name = "MinSlider"
                MinSlider.Parent = SliderModule
                MinSlider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                MinSlider.BackgroundTransparency = 1.000
                MinSlider.BorderSizePixel = 0
                MinSlider.Position = UDim2.new(0.296728969, 40 * self.uiSettings.uiSize, 0.236842096, 0)
                MinSlider.Size = UDim2.new(0, 20 * self.uiSettings.uiSize, 0, 20 * self.uiSettings.uiSize)
                MinSlider.Font = Enum.Font.GothamBold
                MinSlider.Text = "-"
                MinSlider.TextColor3 = self.uiSettings.textColor
                MinSlider.TextSize = 24.000 * self.uiSettings.uiSize
                MinSlider.TextTransparency = 0
                MinSlider.TextWrapped = true
                
                AddSlider.Name = "AddSlider"
                AddSlider.Parent = SliderModule
                AddSlider.AnchorPoint = Vector2.new(0, 0.5)
                AddSlider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                AddSlider.BackgroundTransparency = 1.000
                AddSlider.BorderSizePixel = 0
                AddSlider.Position = UDim2.new(0.810906529, 0, 0.5, 0)
                AddSlider.Size = UDim2.new(0, 20 * self.uiSettings.uiSize, 0, 20 * self.uiSettings.uiSize)
                AddSlider.Font = Enum.Font.GothamBold
                AddSlider.Text = "+"
                AddSlider.TextColor3 = self.uiSettings.textColor
                AddSlider.TextSize = 24.000 * self.uiSettings.uiSize
                AddSlider.TextTransparency = 0
                AddSlider.TextWrapped = true
                
                local funcs = {
                    SetValue = function(self, value)
                        local percent = (mouse.X - SliderBar.AbsolutePosition.X) / SliderBar.AbsoluteSize.X
                        if value then
                            percent = (value - min) / (max - min)
                        end
                        percent = math.clamp(percent, 0, 1)
                        if precise then
                            value = value or tonumber(string.format("%.1f", tostring(min + (max - min) * percent)))
                        else
                            value = value or math.floor(min + (max - min) * percent)
                        end
                        self.flags[flag] = tonumber(value)
                        SliderValue.Text = tostring(value)
                        SliderPart.Size = UDim2.new(percent, 0, 1, 0)
                        callback(tonumber(value))
                    end
                }
                
                if not self.components then self.components = {} end
                self.components[flag] = funcs
                
                MinSlider.MouseButton1Click:Connect(function()
                    local currentValue = self.flags[flag]
                    currentValue = math.clamp(currentValue - 1, min, max)
                    funcs:SetValue(currentValue)
                end)
                
                AddSlider.MouseButton1Click:Connect(function()
                    local currentValue = self.flags[flag]
                    currentValue = math.clamp(currentValue + 1, min, max)
                    funcs:SetValue(currentValue)
                end)
                
                funcs:SetValue(default)
                
                local dragging, boxFocused, allowed = false, false, { [""] = true, ["-"] = true }
                
                SliderBar.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        funcs:SetValue()
                        dragging = true
                    end
                end)
                
                services.UserInputService.InputEnded:Connect(function(input)
                    if dragging and input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = false
                    end
                end)
                
                services.UserInputService.InputChanged:Connect(function(input)
                    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                        funcs:SetValue()
                    end
                end)
                
                SliderBar.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.Touch then
                        funcs:SetValue()
                        dragging = true
                    end
                end)
                
                services.UserInputService.InputEnded:Connect(function(input)
                    if dragging and input.UserInputType == Enum.UserInputType.Touch then
                        dragging = false
                    end
                end)
                
                services.UserInputService.InputChanged:Connect(function(input)
                    if dragging and input.UserInputType == Enum.UserInputType.Touch then
                        funcs:SetValue()
                    end
                end)
                
                SliderValue.Focused:Connect(function()
                    boxFocused = true
                end)
                
                SliderValue.FocusLost:Connect(function()
                    boxFocused = false
                    if SliderValue.Text == "" then
                        funcs:SetValue(default)
                    end
                end)
                
                SliderValue:GetPropertyChangedSignal("Text"):Connect(function()
                    if not boxFocused then
                        return
                    end
                    SliderValue.Text = SliderValue.Text:gsub("%D+", "")
                    local text = SliderValue.Text
                    if not tonumber(text) then
                        SliderValue.Text = SliderValue.Text:gsub("%D+", "")
                    elseif not allowed[text] then
                        if tonumber(text) > max then
                            text = max
                            SliderValue.Text = tostring(max)
                        end
                        funcs:SetValue(tonumber(text))
                    end
                end)
                
                return funcs
            end
            
            function section.Dropdown(section, text, flag, options, callback)
                local callback = callback or function() end
                local options = options or {}
                assert(text, "No text provided")
                assert(flag, "No flag provided")
                self.flags[flag] = nil
                
                local DropdownModule = Instance.new("Frame")
                local DropdownTop = Instance.new("TextButton")
                local DropdownTopC = Instance.new("UICorner")
                local DropdownOpen = Instance.new("TextButton")
                local DropdownText = Instance.new("TextBox")
                local DropdownModuleL = Instance.new("UIListLayout")
                local Option = Instance.new("TextButton")
                local OptionC = Instance.new("UICorner")
                
                DropdownModule.Name = "DropdownModule"
                DropdownModule.Parent = Objs
                DropdownModule.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                DropdownModule.BackgroundTransparency = 1.000
                DropdownModule.BorderSizePixel = 0
                DropdownModule.ClipsDescendants = true
                DropdownModule.Position = UDim2.new(0, 0, 0, 0)
                DropdownModule.Size = UDim2.new(0, 428 * self.uiSettings.uiSize, 0, 38 * self.uiSettings.uiSize)
                
                DropdownTop.Name = "DropdownTop"
                DropdownTop.Parent = DropdownModule
                DropdownTop.BackgroundColor3 = self.uiSettings.controlColor
                DropdownTop.BackgroundTransparency = self.uiSettings.controlTransparency
                DropdownTop.BorderSizePixel = 0
                DropdownTop.Size = UDim2.new(0, 428 * self.uiSettings.uiSize, 0, 38 * self.uiSettings.uiSize)
                DropdownTop.AutoButtonColor = false
                DropdownTop.Font = Enum.Font.GothamBold
                DropdownTop.Text = ""
                DropdownTop.TextColor3 = Color3.fromRGB(255, 255, 255)
                DropdownTop.TextSize = 16.000
                DropdownTop.TextXAlignment = Enum.TextXAlignment.Left
                
                DropdownTopC.CornerRadius = UDim.new(0, self.uiSettings.dropdownCornerRadius * self.uiSettings.uiSize)
                DropdownTopC.Name = "DropdownTopC"
                DropdownTopC.Parent = DropdownTop
                
                DropdownOpen.Name = "DropdownOpen"
                DropdownOpen.Parent = DropdownTop
                DropdownOpen.AnchorPoint = Vector2.new(0, 0.5)
                DropdownOpen.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                DropdownOpen.BackgroundTransparency = 1.000
                DropdownOpen.BorderSizePixel = 0
                DropdownOpen.Position = UDim2.new(0.918383181, 0, 0.5, 0)
                DropdownOpen.Size = UDim2.new(0, 20 * self.uiSettings.uiSize, 0, 20 * self.uiSettings.uiSize)
                DropdownOpen.Font = Enum.Font.GothamBold
                DropdownOpen.Text = "+"
                DropdownOpen.TextColor3 = self.uiSettings.textColor
                DropdownOpen.TextSize = 24.000 * self.uiSettings.uiSize
                DropdownOpen.TextTransparency = 0
                DropdownOpen.TextWrapped = true
                
                DropdownText.Name = "DropdownText"
                DropdownText.Parent = DropdownTop
                DropdownText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                DropdownText.BackgroundTransparency = 1.000
                DropdownText.BorderSizePixel = 0
                DropdownText.Position = UDim2.new(0.0373831764, 0, 0, 0)
                DropdownText.Size = UDim2.new(0, 184 * self.uiSettings.uiSize, 0, 38 * self.uiSettings.uiSize)
                DropdownText.Font = Enum.Font.GothamBold
                DropdownText.PlaceholderColor3 = self.uiSettings.placeholderColor
                DropdownText.PlaceholderText = text
                DropdownText.Text = ""
                DropdownText.TextColor3 = self.uiSettings.textColor
                DropdownText.TextSize = self.uiSettings.dropdownTextSize * self.uiSettings.uiSize
                DropdownText.TextTransparency = 0
                DropdownText.TextXAlignment = Enum.TextXAlignment.Left
                
                DropdownModuleL.Name = "DropdownModuleL"
                DropdownModuleL.Parent = DropdownModule
                DropdownModuleL.SortOrder = Enum.SortOrder.LayoutOrder
                DropdownModuleL.Padding = UDim.new(0, 4 * self.uiSettings.uiSize)
                
                local setAllVisible = function()
                    local options = DropdownModule:GetChildren()
                    for i = 1, #options do
                        local option = options[i]
                        if option:IsA("TextButton") and option.Name:match("Option_") then
                            option.Visible = true
                        end
                    end
                end
                
                local searchDropdown = function(text)
                    local options = DropdownModule:GetChildren()
                    for i = 1, #options do
                        local option = options[i]
                        if text == "" then
                            setAllVisible()
                        else
                            if option:IsA("TextButton") and option.Name:match("Option_") then
                                if option.Text:lower():match(text:lower()) then
                                    option.Visible = true
                                else
                                    option.Visible = false
                                end
                            end
                        end
                    end
                end
                
                local open = false
                local ToggleDropVis = function()
                    open = not open
                    if open then
                        setAllVisible()
                    end
                    DropdownOpen.Text = (open and "-" or "+")
                    DropdownModule.Size =
                        UDim2.new(0, 428 * self.uiSettings.uiSize, 0, (open and DropdownModuleL.AbsoluteContentSize.Y + 4 * self.uiSettings.uiSize or 38 * self.uiSettings.uiSize))
                end
                
                DropdownOpen.MouseButton1Click:Connect(ToggleDropVis)
                
                DropdownText.Focused:Connect(function()
                    if open then
                        return
                    end
                    ToggleDropVis()
                end)
                
                DropdownText:GetPropertyChangedSignal("Text"):Connect(function()
                    if not open then
                        return
                    end
                    searchDropdown(DropdownText.Text)
                end)
                
                DropdownModuleL:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                    if not open then
                        return
                    end
                    DropdownModule.Size = UDim2.new(0, 428 * self.uiSettings.uiSize, 0, (DropdownModuleL.AbsoluteContentSize.Y + 4 * self.uiSettings.uiSize))
                end)
                
                local funcs = {}
                
                funcs.AddOption = function(self, option)
                    local Option = Instance.new("TextButton")
                    local OptionC = Instance.new("UICorner")
                    
                    Option.Name = "Option_" .. option
                    Option.Parent = DropdownModule
                    Option.BackgroundColor3 = self.uiSettings.controlColor
                    Option.BackgroundTransparency = self.uiSettings.controlTransparency
                    Option.BorderSizePixel = 0
                    Option.Position = UDim2.new(0, 0, 0.328125, 0)
                    Option.Size = UDim2.new(0, 428 * self.uiSettings.uiSize, 0, 26 * self.uiSettings.uiSize)
                    Option.AutoButtonColor = false
                    Option.Font = Enum.Font.GothamBold
                    Option.Text = option
                    Option.TextColor3 = self.uiSettings.textColor
                    Option.TextSize = self.uiSettings.buttonTextSize * self.uiSettings.uiSize
                    Option.TextTransparency = 0
                    
                    OptionC.CornerRadius = UDim.new(0, self.uiSettings.buttonCornerRadius * self.uiSettings.uiSize)
                    OptionC.Name = "OptionC"
                    OptionC.Parent = Option
                    
                    Option.MouseButton1Click:Connect(function()
                        ToggleDropVis()
                        callback(Option.Text)
                        DropdownText.Text = Option.Text
                        self.flags[flag] = Option.Text
                    end)
                end
                
                funcs.RemoveOption = function(self, option)
                    local option = DropdownModule:FindFirstChild("Option_" .. option)
                    if option then
                        option:Destroy()
                    end
                end
                
                funcs.SetOptions = function(self, options)
                    for _, v in next, DropdownModule:GetChildren() do
                        if v.Name:match("Option_") then
                            v:Destroy()
                        end
                    end
                    for _, v in next, options do
                        funcs:AddOption(v)
                    end
                end
                
                funcs.Set = function(self, value)
                    for _, option in next, DropdownModule:GetChildren() do
                        if option:IsA("TextButton") and option.Name == "Option_" .. value then
                            option:MouseButton1Click()
                            break
                        end
                    end
                end
                
                if not self.components then self.components = {} end
                self.components[flag] = funcs
                
                funcs:SetOptions(options)
                return funcs
            end
            
            function section.ConfigManager(section)
                local configName = "默认配置"
                local statusLabel = section:Label("当前配置: " .. self.currentConfig)
                
                section:Textbox("配置名称", "config_name", configName, function(value)
                    configName = value
                end)
                
                section:Button("保存配置", function()
                    local success, message = SaveConfig(configName)
                    statusLabel.Text = message
                    
                    local tempLabel = section:Label("✓ " .. message)
                    task.delay(3, function()
                        if tempLabel and tempLabel.Parent then
                            tempLabel:Destroy()
                        end
                    end)
                end)
                
                section:Button("加载配置", function()
                    local success, message = LoadConfig(configName)
                    statusLabel.Text = message
                    
                    local tempLabel = section:Label("✓ " .. message)
                    task.delay(3, function()
                        if tempLabel and tempLabel.Parent then
                            tempLabel:Destroy()
                        end
                    end)
                end)
                
                section:Button("删除配置", function()
                    local success, message = DeleteConfig(configName)
                    statusLabel.Text = message
                    
                    local tempLabel = section:Label("✗ " .. message)
                    task.delay(3, function()
                        if tempLabel and tempLabel.Parent then
                            tempLabel:Destroy()
                        end
                    end)
                end)
                
                section:Button("复制配置数据", function()
                    local success, message = CopyConfigData()
                    statusLabel.Text = message
                    
                    local tempLabel = section:Label("✓ " .. message)
                    task.delay(3, function()
                        if tempLabel and tempLabel.Parent then
                            tempLabel:Destroy()
                        end
                    end)
                end)
                
                local configDataInput = section:Textbox("配置JSON数据", "config_json_data", "", function(value)
                end)
                
                section:Button("更新配置数据", function()
                    local jsonData = self.flags.config_json_data or ""
                    if jsonData == "" then
                        statusLabel.Text = "请输入JSON数据"
                        return
                    end
                    
                    local success, message = UpdateConfigFromData(jsonData)
                    statusLabel.Text = message
                    
                    local tempLabel = section:Label("✓ " .. message)
                    task.delay(3, function()
                        if tempLabel and tempLabel.Parent then
                            tempLabel:Destroy()
                        end
                    end)
                end)
                
                local configList = GetConfigList()
                local dropdown = section:Dropdown("选择配置", "config_selector", configList, function(selected)
                    configName = selected
                    local success, message = LoadConfig(selected)
                    statusLabel.Text = "已加载: " .. selected
                end)
                
                section:Button("刷新配置列表", function()
                    local newConfigList = GetConfigList()
                    dropdown:SetOptions(newConfigList)
                    statusLabel.Text = "配置列表已刷新 (" .. #newConfigList .. " 个配置)"
                end)
                
                section:Toggle("启用自动保存", "auto_save", false, function(state)
                    if state then
                        task.spawn(function()
                            while self.flags.auto_save do
                                task.wait(2)
                                SaveConfig("自动保存")
                                statusLabel.Text = "自动保存完成: " .. os.date("%H:%M:%S")
                            end
                        end)
                    end
                end)
                
                section:Button("重置所有设置", function()
                    for flag, component in pairs(self.components or {}) do
                        if component.SetState then
                            component:SetState(false)
                        elseif component.SetValue then
                            component:SetValue(0)
                        elseif component.Set then
                            component:Set("")
                        end
                    end
                    statusLabel.Text = "所有设置已重置"
                end)
            end
            
            function section.UIStyleSettings(section)
                local statusLabel = section:Label("UI样式设置")
                
                local uiSizeSlider = section:Slider("UI大小缩放", "ui_size", self.uiSettings.uiSize, 0.01, 10.0, true, function(value)
                    self.uiSettings.uiSize = value
                    self:UpdateUIStyle()
                    statusLabel.Text = "UI大小已设置为: " .. string.format("%.1f", value)
                end)
                
                local cornerRadiusSlider = section:Slider("主圆角大小", "corner_radius", self.uiSettings.cornerRadius, 0, 20, false, function(value)
                    self.uiSettings.cornerRadius = value
                    self:UpdateUIStyle()
                    statusLabel.Text = "主圆角大小已设置为: " .. value
                end)
                
                local buttonCornerSlider = section:Slider("按钮圆角大小", "button_corner", self.uiSettings.buttonCornerRadius, 0, 20, false, function(value)
                    self.uiSettings.buttonCornerRadius = value
                    self:UpdateUIStyle()
                    statusLabel.Text = "按钮圆角大小已设置为: " .. value
                end)
                
                local sectionCornerSlider = section:Slider("区域圆角大小", "section_corner", self.uiSettings.sectionCornerRadius, 0, 20, false, function(value)
                    self.uiSettings.sectionCornerRadius = value
                    self:UpdateUIStyle()
                    statusLabel.Text = "区域圆角大小已设置为: " .. value
                end)
                
                local sliderCornerSlider = section:Slider("滑块圆角大小", "slider_corner", self.uiSettings.sliderCornerRadius, 0, 10, false, function(value)
                    self.uiSettings.sliderCornerRadius = value
                    self:UpdateUIStyle()
                    statusLabel.Text = "滑块圆角大小已设置为: " .. value
                end)
                
                local dropdownCornerSlider = section:Slider("下拉框圆角大小", "dropdown_corner", self.uiSettings.dropdownCornerRadius, 0, 20, false, function(value)
                    self.uiSettings.dropdownCornerRadius = value
                    self:UpdateUIStyle()
                    statusLabel.Text = "下拉框圆角大小已设置为: " .. value
                end)
                
                local titleTextSizeSlider = section:Slider("标题文本大小", "title_text_size", self.uiSettings.titleTextSize, 8, 24, false, function(value)
                    self.uiSettings.titleTextSize = value
                    self:UpdateUIStyle()
                    statusLabel.Text = "标题文本大小已设置为: " .. value
                end)
                
                local buttonTextSizeSlider = section:Slider("按钮文本大小", "button_text_size", self.uiSettings.buttonTextSize, 8, 24, false, function(value)
                    self.uiSettings.buttonTextSize = value
                    self:UpdateUIStyle()
                    statusLabel.Text = "按钮文本大小已设置为: " .. value
                end)
                
                local labelTextSizeSlider = section:Slider("标签文本大小", "label_text_size", self.uiSettings.labelTextSize, 8, 20, false, function(value)
                    self.uiSettings.labelTextSize = value
                    self:UpdateUIStyle()
                    statusLabel.Text = "标签文本大小已设置为: " .. value
                end)
                
                local sectionTextSizeSlider = section:Slider("区域文本大小", "section_text_size", self.uiSettings.sectionTextSize, 8, 24, false, function(value)
                    self.uiSettings.sectionTextSize = value
                    self:UpdateUIStyle()
                    statusLabel.Text = "区域文本大小已设置为: " .. value
                end)
                
                local tabTextSizeSlider = section:Slider("标签页文本大小", "tab_text_size", self.uiSettings.tabTextSize, 8, 20, false, function(value)
                    self.uiSettings.tabTextSize = value
                    self:UpdateUIStyle()
                    statusLabel.Text = "标签页文本大小已设置为: " .. value
                end)
                
                local sliderValueTextSizeSlider = section:Slider("滑块值文本大小", "slider_value_text_size", self.uiSettings.sliderValueTextSize, 8, 20, false, function(value)
                    self.uiSettings.sliderValueTextSize = value
                    self:UpdateUIStyle()
                    statusLabel.Text = "滑块值文本大小已设置为: " .. value
                end)
                
                local dropdownTextSizeSlider = section:Slider("下拉框文本大小", "dropdown_text_size", self.uiSettings.dropdownTextSize, 8, 24, false, function(value)
                    self.uiSettings.dropdownTextSize = value
                    self:UpdateUIStyle()
                    statusLabel.Text = "下拉框文本大小已设置为: " .. value
                end)
                
                local textboxTextSizeSlider = section:Slider("文本框文本大小", "textbox_text_size", self.uiSettings.textboxTextSize, 8, 20, false, function(value)
                    self.uiSettings.textboxTextSize = value
                    self:UpdateUIStyle()
                    statusLabel.Text = "文本框文本大小已设置为: " .. value
                end)
                
                local bgTransparencySlider = section:Slider("背景透明度", "bg_transparency", self.uiSettings.backgroundColorTransparency, 0, 1, true, function(value)
                    self.uiSettings.backgroundColorTransparency = value
                    self:UpdateUIStyle()
                    statusLabel.Text = "背景透明度已设置为: " .. string.format("%.1f", value)
                end)
                
                local controlTransparencySlider = section:Slider("控件透明度", "control_transparency", self.uiSettings.controlTransparency, 0, 1, true, function(value)
                    self.uiSettings.controlTransparency = value
                    self:UpdateUIStyle()
                    statusLabel.Text = "控件透明度已设置为: " .. string.format("%.1f", value)
                end)
                
                local bgImageTextbox = section:Textbox("背景图片ID", "bg_image", self.uiSettings.backgroundImage, function(value)
                    self.uiSettings.backgroundImage = value
                    self:UpdateUIStyle()
                    statusLabel.Text = "背景图片已设置"
                end)
                
                local shapeDropdown = section:Dropdown("最小化形状", "minimize_shape", {"Square", "Circle", "Rounded", "PureCircle"}, function(selected)
                    self.uiSettings.minimizeShape = selected
                    self:UpdateUIStyle()
                    statusLabel.Text = "最小化形状已设置为: " .. selected
                end)
                task.spawn(function()
                    task.wait(0.1)
                    if shapeDropdown and shapeDropdown.Set then
                        shapeDropdown:Set(self.uiSettings.minimizeShape)
                    end
                end)
                
                local minimizeImageTextbox = section:Textbox("最小化图片ID", "minimize_image", self.uiSettings.minimizeImage, function(value)
                    self.uiSettings.minimizeImage = value
                    self:UpdateUIStyle()
                    statusLabel.Text = "最小化图片已设置"
                end)
                
                local widthSlider = section:Slider("最小化宽度", "minimize_width", self.uiSettings.minimizeSize.X.Offset, 40, 120, false, function(value)
                    self.uiSettings.minimizeSize = UDim2.new(0, value, 0, self.uiSettings.minimizeSize.Y.Offset)
                    self:UpdateUIStyle()
                    statusLabel.Text = "最小化宽度已设置为: " .. value
                end)
                
                local heightSlider = section:Slider("最小化高度", "minimize_height", self.uiSettings.minimizeSize.Y.Offset, 20, 60, false, function(value)
                    self.uiSettings.minimizeSize = UDim2.new(0, self.uiSettings.minimizeSize.X.Offset, 0, value)
                    self:UpdateUIStyle()
                    statusLabel.Text = "最小化高度已设置为: " .. value
                end)
                
                local colorLabel = section:Label("颜色设置")
                
                local mainColorTextbox = section:Textbox("主色调 (R,G,B)", "main_color", 
                    math.floor(self.uiSettings.mainColor.R * 255) .. "," .. 
                    math.floor(self.uiSettings.mainColor.G * 255) .. "," .. 
                    math.floor(self.uiSettings.mainColor.B * 255), 
                function(value)
                    local r, g, b = value:match("(%d+),(%d+),(%d+)")
                    if r and g and b then
                        self.uiSettings.mainColor = Color3.fromRGB(tonumber(r), tonumber(g), tonumber(b))
                        self:UpdateUIStyle()
                        statusLabel.Text = "主色调已更新"
                    else
                        statusLabel.Text = "颜色格式错误 (使用 R,G,B 格式)"
                    end
                end)
                
                local bgColorTextbox = section:Textbox("背景色 (R,G,B)", "bg_color", 
                    math.floor(self.uiSettings.backgroundColor.R * 255) .. "," .. 
                    math.floor(self.uiSettings.backgroundColor.G * 255) .. "," .. 
                    math.floor(self.uiSettings.backgroundColor.B * 255), 
                function(value)
                    local r, g, b = value:match("(%d+),(%d+),(%d+)")
                    if r and g and b then
                        self.uiSettings.backgroundColor = Color3.fromRGB(tonumber(r), tonumber(g), tonumber(b))
                        self:UpdateUIStyle()
                        statusLabel.Text = "背景色已更新"
                    else
                        statusLabel.Text = "颜色格式错误 (使用 R,G,B 格式)"
                    end
                end)
                
                local controlColorTextbox = section:Textbox("控件颜色 (R,G,B)", "control_color", 
                    math.floor(self.uiSettings.controlColor.R * 255) .. "," .. 
                    math.floor(self.uiSettings.controlColor.G * 255) .. "," .. 
                    math.floor(self.uiSettings.controlColor.B * 255), 
                function(value)
                    local r, g, b = value:match("(%d+),(%d+),(%d+)")
                    if r and g and b then
                        self.uiSettings.controlColor = Color3.fromRGB(tonumber(r), tonumber(g), tonumber(b))
                        self:UpdateUIStyle()
                        statusLabel.Text = "控件颜色已更新"
                    else
                        statusLabel.Text = "颜色格式错误 (使用 R,G,B 格式)"
                    end
                end)
                
                local textColorTextbox = section:Textbox("文本颜色 (R,G,B)", "text_color", 
                    math.floor(self.uiSettings.textColor.R * 255) .. "," .. 
                    math.floor(self.uiSettings.textColor.G * 255) .. "," .. 
                    math.floor(self.uiSettings.textColor.B * 255), 
                function(value)
                    local r, g, b = value:match("(%d+),(%d+),(%d+)")
                    if r and g and b then
                        self.uiSettings.textColor = Color3.fromRGB(tonumber(r), tonumber(g), tonumber(b))
                        self:UpdateUIStyle()
                        statusLabel.Text = "文本颜色已更新"
                    else
                        statusLabel.Text = "颜色格式错误 (使用 R,G,B 格式)"
                    end
                end)
                
                section:Button("重置UI样式", function()
                    self.uiSettings = {
                        mainColor = Color3.fromRGB(0, 0, 0),
                        backgroundColor = Color3.fromRGB(0, 0, 0),
                        backgroundColorTransparency = 0.5,
                        controlColor = Color3.fromRGB(30, 30, 30),
                        controlTransparency = 0.3,
                        textColor = Color3.fromRGB(255, 255, 255),
                        placeholderColor = Color3.fromRGB(180, 180, 180),
                        disabledTextColor = Color3.fromRGB(150, 150, 150),
                        uiSize = 1.0,
                        backgroundImage = "",
                        minimizeShape = "Square",
                        minimizeImage = "",
                        minimizeSize = UDim2.new(0, 61, 0, 32),
                        cornerRadius = 6,
                        buttonCornerRadius = 6,
                        sectionCornerRadius = 6,
                        sliderCornerRadius = 4,
                        dropdownCornerRadius = 6,
                        titleTextSize = 16,
                        buttonTextSize = 16,
                        labelTextSize = 14,
                        sectionTextSize = 16,
                        tabTextSize = 14,
                        sliderValueTextSize = 14,
                        dropdownTextSize = 16,
                        textboxTextSize = 14
                    }
                    
                    uiSizeSlider:SetValue(1.0)
                    cornerRadiusSlider:SetValue(6)
                    buttonCornerSlider:SetValue(6)
                    sectionCornerSlider:SetValue(6)
                    sliderCornerSlider:SetValue(4)
                    dropdownCornerSlider:SetValue(6)
                    titleTextSizeSlider:SetValue(16)
                    buttonTextSizeSlider:SetValue(16)
                    labelTextSizeSlider:SetValue(14)
                    sectionTextSizeSlider:SetValue(16)
                    tabTextSizeSlider:SetValue(14)
                    sliderValueTextSizeSlider:SetValue(14)
                    dropdownTextSizeSlider:SetValue(16)
                    textboxTextSizeSlider:SetValue(14)
                    bgTransparencySlider:SetValue(0.5)
                    controlTransparencySlider:SetValue(0.3)
                    bgImageTextbox.Text = ""
                    shapeDropdown:Set("Square")
                    minimizeImageTextbox.Text = ""
                    widthSlider:SetValue(61)
                    heightSlider:SetValue(32)
                    mainColorTextbox.Text = "0,0,0"
                    bgColorTextbox.Text = "0,0,0"
                    controlColorTextbox.Text = "30,30,30"
                    textColorTextbox.Text = "255,255,255"
                    
                    self:UpdateUIStyle()
                    statusLabel.Text = "UI样式已重置为默认值"
                end)
                
                section:Button("应用样式", function()
                    self:UpdateUIStyle()
                    statusLabel.Text = "样式已应用"
                end)
            end
            
            return section
        end
        return tab
    end
    
    return window
end

-- 新增：WindUI创建函数（高仿原WindUI风格，使用默认UI组件体系）
function library:CreateWindUI()
    for _, v in next, services.CoreGui:GetChildren() do
        if v.Name == "WindUI" then
            v:Destroy()
        end
    end
    
    local windGui = Instance.new("ScreenGui")
    local WindMain = Instance.new("Frame")
    local Topbar = Instance.new("Frame")
    local Sidebar = Instance.new("ScrollingFrame")
    local MainContent = Instance.new("Frame")
    local UICornerMain = Instance.new("UICorner")
    local DropShadow = Instance.new("ImageLabel")
    local SidebarList = Instance.new("UIListLayout")
    local MainContentList = Instance.new("UIListLayout")
    local WindTitle = Instance.new("TextLabel")
    local WindOpen = Instance.new("TextButton")
    local WindOpenCorner = Instance.new("UICorner")
    local ThemeToggle = Instance.new("TextButton")
    
    if syn and syn.protect_gui then
        syn.protect_gui(windGui)
    end
    
    windGui.Name = "WindUI"
    windGui.Parent = services.CoreGui
    
    self.uiElements.WindMain = WindMain
    self.uiElements.WindScreenGui = windGui
    self.uiElements.WindSidebar = Sidebar
    self.uiElements.WindMainContent = MainContent
    
    -- WindUI主窗口样式（高仿原WindUI深色主题）
    local theme = self.windUIThemes[self.currentWindTheme]
    
    WindMain.Name = "WindMain"
    WindMain.Parent = windGui
    WindMain.AnchorPoint = Vector2.new(0.5, 0.5)
    WindMain.BackgroundColor3 = theme.Background
    WindMain.BackgroundTransparency = 0
    WindMain.Position = UDim2.new(0.5, 0, 0.5, 0)
    WindMain.Size = UDim2.new(0, 620 * self.uiSettings.uiSize, 0, 480 * self.uiSettings.uiSize)
    WindMain.ZIndex = 1
    WindMain.Active = true
    
    -- 阴影效果
    DropShadow.Name = "DropShadow"
    DropShadow.Parent = WindMain
    DropShadow.AnchorPoint = Vector2.new(0.5, 0.5)
    DropShadow.BackgroundTransparency = 1.000
    DropShadow.Position = UDim2.new(0.5, 0, 0.5, 0)
    DropShadow.Size = UDim2.new(1, 20 * self.uiSettings.uiSize, 1, 20 * self.uiSettings.uiSize)
    DropShadow.Image = "rbxassetid://6015897843"
    DropShadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    DropShadow.ImageTransparency = 0.7
    DropShadow.ScaleType = Enum.ScaleType.Slice
    DropShadow.SliceCenter = Rect.new(49, 49, 450, 450)
    DropShadow.ZIndex = 0
    
    UICornerMain.Parent = WindMain
    UICornerMain.CornerRadius = UDim.new(0, 12 * self.uiSettings.uiSize)
    
    -- 顶部栏
    Topbar.Name = "Topbar"
    Topbar.Parent = WindMain
    Topbar.BackgroundColor3 = theme.Accent
    Topbar.BackgroundTransparency = 0
    Topbar.Size = UDim2.new(1, 0, 0, 48 * self.uiSettings.uiSize)
    Topbar.ZIndex = 2
    
    WindTitle.Name = "WindTitle"
    WindTitle.Parent = Topbar
    WindTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    WindTitle.BackgroundTransparency = 1.000
    WindTitle.Position = UDim2.new(0.03, 0, 0.5, 0)
    WindTitle.AnchorPoint = Vector2.new(0, 0.5)
    WindTitle.Size = UDim2.new(0, 200 * self.uiSettings.uiSize, 0, 32 * self.uiSettings.uiSize)
    WindTitle.Font = Enum.Font.GothamBold
    WindTitle.Text = "WindUI 高仿版"
    WindTitle.TextColor3 = theme.Text
    WindTitle.TextSize = 18 * self.uiSettings.uiSize
    WindTitle.TextTransparency = 0
    
    -- 主题切换按钮
    ThemeToggle.Name = "ThemeToggle"
    ThemeToggle.Parent = Topbar
    ThemeToggle.BackgroundColor3 = theme.Button
    ThemeToggle.BackgroundTransparency = 0.2
    ThemeToggle.Position = UDim2.new(0.95, 0, 0.5, 0)
    ThemeToggle.AnchorPoint = Vector2.new(1, 0.5)
    ThemeToggle.Size = UDim2.new(0, 120 * self.uiSettings.uiSize, 0, 32 * self.uiSettings.uiSize)
    ThemeToggle.Font = Enum.Font.GothamMedium
    ThemeToggle.Text = self.currentWindTheme == "Dark" and "切换亮色" or "切换暗色"
    ThemeToggle.TextColor3 = theme.Text
    ThemeToggle.TextSize = 14 * self.uiSettings.uiSize
    ThemeToggle.TextTransparency = 0
    
    local ThemeToggleCorner = Instance.new("UICorner")
    ThemeToggleCorner.CornerRadius = UDim.new(0, 6 * self.uiSettings.uiSize)
    ThemeToggleCorner.Parent = ThemeToggle
    
    ThemeToggle.MouseButton1Click:Connect(function()
        self.currentWindTheme = self.currentWindTheme == "Dark" and "Light" or "Dark"
        ThemeToggle.Text = self.currentWindTheme == "Dark" and "切换亮色" or "切换暗色"
        self:UpdateWindUIStyle()
    end)
    
    -- 侧边栏
    Sidebar.Name = "Sidebar"
    Sidebar.Parent = WindMain
    Sidebar.BackgroundColor3 = theme.Accent
    Sidebar.BackgroundTransparency = 0
    Sidebar.Position = UDim2.new(0, 0, 0, 48 * self.uiSettings.uiSize)
    Sidebar.Size = UDim2.new(0, 180 * self.uiSettings.uiSize, 1, -48 * self.uiSettings.uiSize)
    Sidebar.CanvasSize = UDim2.new(0, 0, 1, 0)
    Sidebar.ScrollBarThickness = 2 * self.uiSettings.uiSize
    Sidebar.ZIndex = 2
    
    SidebarList.Name = "SidebarList"
    SidebarList.Parent = Sidebar
    SidebarList.SortOrder = Enum.SortOrder.LayoutOrder
    SidebarList.Padding = UDim.new(0, 6 * self.uiSettings.uiSize)
    
    SidebarList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        Sidebar.CanvasSize = UDim2.new(0, 0, 0, SidebarList.AbsoluteContentSize.Y + 12 * self.uiSettings.uiSize)
    end)
    
    -- 主内容区
    MainContent.Name = "MainContent"
    MainContent.Parent = WindMain
    MainContent.BackgroundColor3 = theme.Background
    MainContent.BackgroundTransparency = 0
    MainContent.Position = UDim2.new(0, 180 * self.uiSettings.uiSize, 0, 48 * self.uiSettings.uiSize)
    MainContent.Size = UDim2.new(1, -180 * self.uiSettings.uiSize, 1, -48 * self.uiSettings.uiSize)
    MainContent.ZIndex = 2
    
    MainContentList.Name = "MainContentList"
    MainContentList.Parent = MainContent
    MainContentList.SortOrder = Enum.SortOrder.LayoutOrder
    MainContentList.Padding = UDim.new(0, 8 * self.uiSettings.uiSize)
    
    MainContentList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        MainContent.CanvasSize = UDim2.new(0, 0, 0, MainContentList.AbsoluteContentSize.Y + 12 * self.uiSettings.uiSize)
    end)
    
    -- 最小化按钮
    WindOpen.Name = "WindOpen"
    WindOpen.Parent = windGui
    WindOpen.BackgroundColor3 = theme.Accent
    WindOpen.BackgroundTransparency = 0
    WindOpen.Position = UDim2.new(0.02, 0, 0.3, 0)
    WindOpen.Size = UDim2.new(0, 50 * self.uiSettings.uiSize, 0, 50 * self.uiSettings.uiSize)
    WindOpen.Font = Enum.Font.GothamBold
    WindOpen.Text = "W"
    WindOpen.TextColor3 = theme.Text
    WindOpen.TextSize = 20 * self.uiSettings.uiSize
    WindOpen.TextTransparency = 0
    WindOpen.Active = true
    WindOpen.Draggable = true
    WindOpen.ZIndex = 100
    
    WindOpenCorner.Parent = WindOpen
    WindOpenCorner.CornerRadius = UDim.new(0.5, 0)
    
    WindOpen.MouseButton1Click:Connect(function()
        WindMain.Visible = not WindMain.Visible
    end)
    
    -- 拖拽功能
    drag(WindMain, Topbar)
    
    -- 快捷键支持
    services.UserInputService.InputEnded:Connect(function(input)
        if input.KeyCode == Enum.KeyCode.LeftControl then
            WindMain.Visible = not WindMain.Visible
        end
    end)
    
    -- 创建WindUI默认标签页（使用原UI的Tab创建逻辑适配）
    local windWindow = {}
    function windWindow.Tab(window, name, icon)
        local Tab = Instance.new("ScrollingFrame")
        local TabIco = Instance.new("ImageLabel")
        local TabText = Instance.new("TextLabel")
        local TabBtn = Instance.new("TextButton")
        local TabL = Instance.new("UIListLayout")
        
        Tab.Name = "WindTab"
        Tab.Parent = MainContent
        Tab.Active = true
        Tab.BackgroundColor3 = theme.Background
        Tab.BackgroundTransparency = 1.000
        Tab.Size = UDim2.new(1, 0, 1, 0)
        Tab.ScrollBarThickness = 2 * self.uiSettings.uiSize
        Tab.Visible = false
        
        TabIco.Name = "TabIco"
        TabIco.Parent = Sidebar
        TabIco.BackgroundTransparency = 1.000
        TabIco.BorderSizePixel = 0
        TabIco.Size = UDim2.new(0, 20 * self.uiSettings.uiSize, 0, 20 * self.uiSettings.uiSize)
        TabIco.Image = ("rbxassetid://%s"):format((icon or 4370341699))
        TabIco.ImageTransparency = 0.3
        
        TabText.Name = "TabText"
        TabText.Parent = TabIco
        TabText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        TabText.BackgroundTransparency = 1.000
        TabText.Position = UDim2.new(1.3, 0, 0, 0)
        TabText.Size = UDim2.new(0, 120 * self.uiSettings.uiSize, 0, 20 * self.uiSettings.uiSize)
        TabText.Font = Enum.Font.GothamMedium
        TabText.Text = name
        TabText.TextColor3 = theme.Text
        TabText.TextSize = 14 * self.uiSettings.uiSize
        TabText.TextTransparency = 0.3
        TabText.TextXAlignment = Enum.TextXAlignment.Left
        
        TabBtn.Name = "TabBtn"
        TabBtn.Parent = TabIco
        TabBtn.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        TabBtn.BackgroundTransparency = 1.000
        TabBtn.BorderSizePixel = 0
        TabBtn.Size = UDim2.new(0, 160 * self.uiSettings.uiSize, 0, 20 * self.uiSettings.uiSize)
        TabBtn.AutoButtonColor = false
        TabBtn.Font = Enum.Font.SourceSans
        TabBtn.Text = ""
        TabBtn.TextColor3 = Color3.fromRGB(0, 0, 0)
        TabBtn.TextSize = 14.000
        
        TabL.Name = "TabL"
        TabL.Parent = Tab
        TabL.SortOrder = Enum.SortOrder.LayoutOrder
        TabL.Padding = UDim.new(0, 8 * self.uiSettings.uiSize)
        
        TabBtn.MouseButton1Click:Connect(function()
            spawn(function()
                Ripple(TabBtn)
            end)
            switchTab({ TabIco, Tab })
        end)
        
        if self.currentTab == nil then
            switchTab({ TabIco, Tab })
        end
        
        TabL:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            Tab.CanvasSize = UDim2.new(0, 0, 0, TabL.AbsoluteContentSize.Y + 8 * self.uiSettings.uiSize)
        end)
        
        local tab = {}
        
        -- WindUI风格的Section（适配原组件）
        function tab.section(tab, name, TabVal)
            local Section = Instance.new("Frame")
            local SectionC = Instance.new("UICorner")
            local SectionText = Instance.new("TextLabel")
            local SectionOpen = Instance.new("ImageLabel")
            local SectionOpened = Instance.new("ImageLabel")
            local SectionToggle = Instance.new("ImageButton")
            local Objs = Instance.new("Frame")
            local ObjsL = Instance.new("UIListLayout")
            
            Section.Name = "WindSection"
            Section.Parent = Tab
            Section.BackgroundColor3 = theme.Accent
            Section.BackgroundTransparency = 0.2
            Section.BorderSizePixel = 0
            Section.ClipsDescendants = true
            Section.Size = UDim2.new(0.96, 0, 0, 34 * self.uiSettings.uiSize)
            
            SectionC.CornerRadius = UDim.new(0, 8 * self.uiSettings.uiSize)
            SectionC.Name = "SectionC"
            SectionC.Parent = Section
            
            SectionText.Name = "SectionText"
            SectionText.Parent = Section
            SectionText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            SectionText.BackgroundTransparency = 1.000
            SectionText.Position = UDim2.new(0.05, 0, 0, 0)
            SectionText.Size = UDim2.new(0, 380 * self.uiSettings.uiSize, 0, 34 * self.uiSettings.uiSize)
            SectionText.Font = Enum.Font.GothamBold
            SectionText.Text = name
            SectionText.TextColor3 = theme.Text
            SectionText.TextSize = 16 * self.uiSettings.uiSize
            SectionText.TextTransparency = 0
            SectionText.TextXAlignment = Enum.TextXAlignment.Left
            
            SectionOpen.Name = "SectionOpen"
            SectionOpen.Parent = SectionText
            SectionOpen.BackgroundTransparency = 1
            SectionOpen.BorderSizePixel = 0
            SectionOpen.Position = UDim2.new(0, -28 * self.uiSettings.uiSize, 0, 4 * self.uiSettings.uiSize)
            SectionOpen.Size = UDim2.new(0, 24 * self.uiSettings.uiSize, 0, 24 * self.uiSettings.uiSize)
            SectionOpen.Image = "http://www.roblox.com/asset/?id=6031302934"
            SectionOpen.ImageColor3 = theme.Icon
            
            SectionOpened.Name = "SectionOpened"
            SectionOpened.Parent = SectionOpen
            SectionOpened.BackgroundTransparency = 1.000
            SectionOpened.BorderSizePixel = 0
            SectionOpened.Size = UDim2.new(0, 24 * self.uiSettings.uiSize, 0, 24 * self.uiSettings.uiSize)
            SectionOpened.Image = "http://www.roblox.com/asset/?id=6031302932"
            SectionOpened.ImageColor3 = theme.Icon
            SectionOpened.ImageTransparency = 1.000
            
            SectionToggle.Name = "SectionToggle"
            SectionToggle.Parent = SectionOpen
            SectionToggle.BackgroundTransparency = 1
            SectionToggle.BorderSizePixel = 0
            SectionToggle.Size = UDim2.new(0, 24 * self.uiSettings.uiSize, 0, 24 * self.uiSettings.uiSize)
            
            Objs.Name = "Objs"
            Objs.Parent = Section
            Objs.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Objs.BackgroundTransparency = 1
            Objs.BorderSizePixel = 0
            Objs.Position = UDim2.new(0, 8 * self.uiSettings.uiSize, 0, 34 * self.uiSettings.uiSize)
            Objs.Size = UDim2.new(0.97, 0, 0, 0)
            
            ObjsL.Name = "ObjsL"
            ObjsL.Parent = Objs
            ObjsL.SortOrder = Enum.SortOrder.LayoutOrder
            ObjsL.Padding = UDim.new(0, 8 * self.uiSettings.uiSize)
            
            local open = TabVal
            if TabVal ~= false then
                Section.Size = UDim2.new(0.96, 0, 0, open and 34 * self.uiSettings.uiSize + ObjsL.AbsoluteContentSize.Y + 8 * self.uiSettings.uiSize or 34 * self.uiSettings.uiSize)
                SectionOpened.ImageTransparency = (open and 0 or 1)
                SectionOpen.ImageTransparency = (open and 1 or 0)
            end
            
            SectionToggle.MouseButton1Click:Connect(function()
                open = not open
                Section.Size = UDim2.new(0.96, 0, 0, open and 34 * self.uiSettings.uiSize + ObjsL.AbsoluteContentSize.Y + 8 * self.uiSettings.uiSize or 34 * self.uiSettings.uiSize)
                SectionOpened.ImageTransparency = (open and 0 or 1)
                SectionOpen.ImageTransparency = (open and 1 or 0)
            end)
            
            ObjsL:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                if not open then
                    return
                end
                Section.Size = UDim2.new(0.96, 0, 0, 34 * self.uiSettings.uiSize + ObjsL.AbsoluteContentSize.Y + 8 * self.uiSettings.uiSize)
            end)
            
            local section = {}
            
            -- 完全复用原UI的组件创建逻辑，仅修改样式适配WindUI
            function section.Button(section, text, callback)
                local callback = callback or function() end
                local BtnModule = Instance.new("Frame")
                local Btn = Instance.new("TextButton")
                local BtnC = Instance.new("UICorner")
                
                BtnModule.Name = "BtnModule"
                BtnModule.Parent = Objs
                BtnModule.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                BtnModule.BackgroundTransparency = 1.000
                BtnModule.BorderSizePixel = 0
                BtnModule.Position = UDim2.new(0, 0, 0, 0)
                BtnModule.Size = UDim2.new(0, 390 * self.uiSettings.uiSize, 0, 36 * self.uiSettings.uiSize)
                
                Btn.Name = "Btn"
                Btn.Parent = BtnModule
                Btn.BackgroundColor3 = theme.Button
                Btn.BackgroundTransparency = 0.2
                Btn.BorderSizePixel = 0
                Btn.Size = UDim2.new(0, 390 * self.uiSettings.uiSize, 0, 36 * self.uiSettings.uiSize)
                Btn.AutoButtonColor = false
                Btn.Font = Enum.Font.GothamMedium
                Btn.Text = "   " .. text
                Btn.TextColor3 = theme.Text
                Btn.TextSize = 15 * self.uiSettings.uiSize
                Btn.TextTransparency = 0
                Btn.TextXAlignment = Enum.TextXAlignment.Left
                
                BtnC.CornerRadius = UDim.new(0, 6 * self.uiSettings.uiSize)
                BtnC.Name = "BtnC"
                BtnC.Parent = Btn
                
                Btn.MouseButton1Click:Connect(function()
                    spawn(function()
                        Ripple(Btn)
                    end)
                    spawn(callback)
                end)
                
                return {}
            end
            
            function section:Label(text)
                local LabelModule = Instance.new("Frame")
                local TextLabel = Instance.new("TextLabel")
                local LabelC = Instance.new("UICorner")
                
                LabelModule.Name = "LabelModule"
                LabelModule.Parent = Objs
                LabelModule.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                LabelModule.BackgroundTransparency = 1.000
                LabelModule.BorderSizePixel = 0
                LabelModule.Position = UDim2.new(0, 0, NAN, 0)
                LabelModule.Size = UDim2.new(0, 390 * self.uiSettings.uiSize, 0, 18 * self.uiSettings.uiSize)
                
                TextLabel.Parent = LabelModule
                TextLabel.BackgroundColor3 = theme.Accent
                TextLabel.BackgroundTransparency = 0.3
                TextLabel.Size = UDim2.new(0, 390 * self.uiSettings.uiSize, 0, 20 * self.uiSettings.uiSize)
                TextLabel.Font = Enum.Font.GothamMedium
                TextLabel.Text = text
                TextLabel.TextColor3 = theme.Text
                TextLabel.TextSize = 14 * self.uiSettings.uiSize
                TextLabel.TextTransparency = 0.1
                
                LabelC.CornerRadius = UDim.new(0, 4 * self.uiSettings.uiSize)
                LabelC.Name = "LabelC"
                LabelC.Parent = TextLabel
                
                return TextLabel
            end
            
            function section.Toggle(section, text, flag, enabled, callback)
                local callback = callback or function() end
                local enabled = enabled or false
                assert(text, "No text provided")
                assert(flag, "No flag provided")
                self.flags[flag] = enabled
                
                local ToggleModule = Instance.new("Frame")
                local ToggleBtn = Instance.new("TextButton")
                local ToggleBtnC = Instance.new("UICorner")
                local ToggleDisable = Instance.new("Frame")
                local ToggleSwitch = Instance.new("Frame")
                local ToggleSwitchC = Instance.new("UICorner")
                local ToggleDisableC = Instance.new("UICorner")
                
                ToggleModule.Name = "ToggleModule"
                ToggleModule.Parent = Objs
                ToggleModule.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                ToggleModule.BackgroundTransparency = 1.000
                ToggleModule.BorderSizePixel = 0
                ToggleModule.Position = UDim2.new(0, 0, 0, 0)
                ToggleModule.Size = UDim2.new(0, 390 * self.uiSettings.uiSize, 0, 36 * self.uiSettings.uiSize)
                
                ToggleBtn.Name = "ToggleBtn"
                ToggleBtn.Parent = ToggleModule
                ToggleBtn.BackgroundColor3 = theme.Accent
                ToggleBtn.BackgroundTransparency = 0.2
                ToggleBtn.BorderSizePixel = 0
                ToggleBtn.Size = UDim2.new(0, 390 * self.uiSettings.uiSize, 0, 36 * self.uiSettings.uiSize)
                ToggleBtn.AutoButtonColor = false
                ToggleBtn.Font = Enum.Font.GothamMedium
                ToggleBtn.Text = "   " .. text
                ToggleBtn.TextColor3 = theme.Text
                ToggleBtn.TextSize = 15 * self.uiSettings.uiSize
                ToggleBtn.TextTransparency = 0
                ToggleBtn.TextXAlignment = Enum.TextXAlignment.Left
                
                ToggleBtnC.CornerRadius = UDim.new(0, 6 * self.uiSettings.uiSize)
                ToggleBtnC.Name = "ToggleBtnC"
                ToggleBtnC.Parent = ToggleBtn
                
                ToggleDisable.Name = "ToggleDisable"
                ToggleDisable.Parent = ToggleBtn
                ToggleDisable.BackgroundColor3 = theme.Background
                ToggleDisable.BackgroundTransparency = 0
                ToggleDisable.BorderSizePixel = 0
                ToggleDisable.Position = UDim2.new(0.88, 0, 0.22, 0)
                ToggleDisable.Size = UDim2.new(0, 34 * self.uiSettings.uiSize, 0, 20 * self.uiSettings.uiSize)
                
                ToggleSwitch.Name = "ToggleSwitch"
                ToggleSwitch.Parent = ToggleDisable
                ToggleSwitch.BackgroundColor3 = theme.Text
                ToggleSwitch.Size = UDim2.new(0, 22 * self.uiSettings.uiSize, 0, 20 * self.uiSettings.uiSize)
                
                ToggleSwitchC.CornerRadius = UDim.new(0, 10 * self.uiSettings.uiSize)
                ToggleSwitchC.Name = "ToggleSwitchC"
                ToggleSwitchC.Parent = ToggleSwitch
                
                ToggleDisableC.CornerRadius = UDim.new(0, 10 * self.uiSettings.uiSize)
                ToggleDisableC.Name = "ToggleDisableC"
                ToggleDisableC.Parent = ToggleDisable
                
                local funcs = {
                    SetState = function(self, state)
                        if state == nil then
                            state = not self.flags[flag]
                        end
                        if self.flags[flag] == state then
                            return
                        end
                        services.TweenService
                            :Create(
                                ToggleSwitch,
                                TweenInfo.new(0.2),
                                {
                                    Position = UDim2.new(0, (state and ToggleSwitch.Size.X.Offset / 2 or 0), 0, 0),
                                    BackgroundColor3 = (state and theme.Text or Color3.fromRGB(100, 100, 100)),
                                }
                            )
                            :Play()
                        self.flags[flag] = state
                        callback(state)
                    end,
                    Module = ToggleModule
                }
                
                if not self.components then self.components = {} end
                self.components[flag] = funcs
                
                if enabled ~= false then
                    funcs:SetState(flag, true)
                end
                
                ToggleBtn.MouseButton1Click:Connect(function()
                    funcs:SetState()
                end)
                
                return funcs
            end
            
            -- 其余组件（Keybind、Textbox、Slider、Dropdown）完全复用原逻辑，仅修改样式色值
            function section.Keybind(section, text, default, callback)
                local callback = callback or function() end
                assert(text, "No text provided")
                assert(default, "No default key provided")
                local default = (typeof(default) == "string" and Enum.KeyCode[default] or default)
                local banned = {
                    Return = true,
                    Space = true,
                    Tab = true,
                    Backquote = true,
                    CapsLock = true,
                    Escape = true,
                    Unknown = true,
                }
                local shortNames = {
                    RightControl = "Right Ctrl",
                    LeftControl = "Left Ctrl",
                    LeftShift = "Left Shift",
                    RightShift = "Right Shift",
                    Semicolon = ";",
                    Quote = '"',
                    LeftBracket = "[",
                    RightBracket = "]",
                    Equals = "=",
                    Minus = "-",
                    RightAlt = "Right Alt",
                    LeftAlt = "Left Alt",
                }
                local bindKey = default
                local keyTxt = (default and (shortNames[default.Name] or default.Name) or "None")
                local flag = "wind_keybind_" .. text
                
                local KeybindModule = Instance.new("Frame")
                local KeybindBtn = Instance.new("TextButton")
                local KeybindBtnC = Instance.new("UICorner")
                local KeybindValue = Instance.new("TextButton")
                local KeybindValueC = Instance.new("UICorner")
                local KeybindL = Instance.new("UIListLayout")
                local UIPadding = Instance.new("UIPadding")
                
                KeybindModule.Name = "KeybindModule"
                KeybindModule.Parent = Objs
                KeybindModule.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                KeybindModule.BackgroundTransparency = 1.000
                KeybindModule.BorderSizePixel = 0
                KeybindModule.Position = UDim2.new(0, 0, 0, 0)
                KeybindModule.Size = UDim2.new(0, 390 * self.uiSettings.uiSize, 0, 36 * self.uiSettings.uiSize)
                
                KeybindBtn.Name = "KeybindBtn"
                KeybindBtn.Parent = KeybindModule
                KeybindBtn.BackgroundColor3 = theme.Accent
                KeybindBtn.BackgroundTransparency = 0.2
                KeybindBtn.BorderSizePixel = 0
                KeybindBtn.Size = UDim2.new(0, 390 * self.uiSettings.uiSize, 0, 36 * self.uiSettings.uiSize)
                KeybindBtn.AutoButtonColor = false
                KeybindBtn.Font = Enum.Font.GothamMedium
                KeybindBtn.Text = "   " .. text
                KeybindBtn.TextColor3 = theme.Text
                KeybindBtn.TextSize = 15 * self.uiSettings.uiSize
                KeybindBtn.TextTransparency = 0
                KeybindBtn.TextXAlignment = Enum.TextXAlignment.Left
                
                KeybindBtnC.CornerRadius = UDim.new(0, 6 * self.uiSettings.uiSize)
                KeybindBtnC.Name = "KeybindBtnC"
                KeybindBtnC.Parent = KeybindBtn
                
                KeybindValue.Name = "KeybindValue"
                KeybindValue.Parent = KeybindBtn
                KeybindValue.BackgroundColor3 = theme.Button
                KeybindValue.BackgroundTransparency = 0.3
                KeybindValue.BorderSizePixel = 0
                KeybindValue.Position = UDim2.new(0.72, 0, 0.25, 0)
                KeybindValue.Size = UDim2.new(0, 100 * self.uiSettings.uiSize, 0, 26 * self.uiSettings.uiSize)
                KeybindValue.AutoButtonColor = false
                KeybindValue.Font = Enum.Font.GothamMedium
                KeybindValue.Text = keyTxt
                KeybindValue.TextColor3 = theme.Text
                KeybindValue.TextSize = 14 * self.uiSettings.uiSize
                KeybindValue.TextTransparency = 0
                
                KeybindValueC.CornerRadius = UDim.new(0, 4 * self.uiSettings.uiSize)
                KeybindValueC.Name = "KeybindValueC"
                KeybindValueC.Parent = KeybindValue
                
                KeybindL.Name = "KeybindL"
                KeybindL.Parent = KeybindBtn
                KeybindL.HorizontalAlignment = Enum.HorizontalAlignment.Right
                KeybindL.SortOrder = Enum.SortOrder.LayoutOrder
                KeybindL.VerticalAlignment = Enum.VerticalAlignment.Center
                
                UIPadding.Parent = KeybindBtn
                UIPadding.PaddingRight = UDim.new(0, 6 * self.uiSettings.uiSize)

                local funcs = {}
                
                funcs.Set = function(self, value)
                    if typeof(value) == "string" then
                        value = Enum.KeyCode[value]
                    end
                    if value and not banned[value.Name] then
                        bindKey = value
                        KeybindValue.Text = shortNames[value.Name] or value.Name
                    end
                end
                
                if not self.components then self.components = {} end
                self.components[flag] = funcs
                
                services.UserInputService.InputBegan:Connect(function(inp, gpe)
                    if gpe then
                        return
                    end
                    if inp.UserInputType ~= Enum.UserInputType.Keyboard then
                        return
                    end
                    if inp.KeyCode ~= bindKey then
                        return
                    end
                    callback(bindKey.Name)
                end)
                
                KeybindValue.MouseButton1Click:Connect(function()
                    KeybindValue.Text = "..."
                    wait()
                    local key, uwu = services.UserInputService.InputEnded:Wait()
                    local keyName = tostring(key.KeyCode.Name)
                    if key.UserInputType ~= Enum.UserInputType.Keyboard then
                        KeybindValue.Text = keyTxt
                        return
                    end
                    if banned[keyName] then
                        KeybindValue.Text = keyTxt
                        return
                    end
                    wait()
                    bindKey = Enum.KeyCode[keyName]
                    KeybindValue.Text = shortNames[keyName] or keyName
                end)
                
                KeybindValue:GetPropertyChangedSignal("TextBounds"):Connect(function()
                    KeybindValue.Size = UDim2.new(0, KeybindValue.TextBounds.X + 26 * self.uiSettings.uiSize, 0, 26 * self.uiSettings.uiSize)
                end)
                
                KeybindValue.Size = UDim2.new(0, KeybindValue.TextBounds.X + 26 * self.uiSettings.uiSize, 0, 26 * self.uiSettings.uiSize)
                
                return funcs
            end
            
            function section.Textbox(section, text, flag, default, callback)
                local callback = callback or function() end
                assert(text, "No text provided")
                assert(flag, "No flag provided")
                assert(default, "No default text provided")
                self.flags[flag] = default
                
                local TextboxModule = Instance.new("Frame")
                local TextboxBack = Instance.new("TextButton")
                local TextboxBackC = Instance.new("UICorner")
                local BoxBG = Instance.new("TextButton")
                local BoxBGC = Instance.new("UICorner")
                local TextBox = Instance.new("TextBox")
                local TextboxBackL = Instance.new("UIListLayout")
                local TextboxBackP = Instance.new("UIPadding")
                
                TextboxModule.Name = "TextboxModule"
                TextboxModule.Parent = Objs
                TextboxModule.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                TextboxModule.BackgroundTransparency = 1.000
                TextboxModule.BorderSizePixel = 0
                TextboxModule.Position = UDim2.new(0, 0, 0, 0)
                TextboxModule.Size = UDim2.new(0, 390 * self.uiSettings.uiSize, 0, 36 * self.uiSettings.uiSize)
                
                TextboxBack.Name = "TextboxBack"
                TextboxBack.Parent = TextboxModule
                TextboxBack.BackgroundColor3 = theme.Accent
                TextboxBack.BackgroundTransparency = 0.2
                TextboxBack.BorderSizePixel = 0
                TextboxBack.Size = UDim2.new(0, 390 * self.uiSettings.uiSize, 0, 36 * self.uiSettings.uiSize)
                TextboxBack.AutoButtonColor = false
                TextboxBack.Font = Enum.Font.GothamMedium
                TextboxBack.Text = "   " .. text
                TextboxBack.TextColor3 = theme.Text
                TextboxBack.TextSize = 15 * self.uiSettings.uiSize
                TextboxBack.TextTransparency = 0
                TextboxBack.TextXAlignment = Enum.TextXAlignment.Left
                
                TextboxBackC.CornerRadius = UDim.new(0, 6 * self.uiSettings.uiSize)
                TextboxBackC.Name = "TextboxBackC"
                TextboxBackC.Parent = TextboxBack
                
                BoxBG.Name = "BoxBG"
                BoxBG.Parent = TextboxBack
                BoxBG.BackgroundColor3 = theme.Background
                BoxBG.BackgroundTransparency = 0
                BoxBG.BorderSizePixel = 0
                BoxBG.Position = UDim2.new(0.72, 0, 0.25, 0)
                BoxBG.Size = UDim2.new(0, 100 * self.uiSettings.uiSize, 0, 26 * self.uiSettings.uiSize)
                BoxBG.AutoButtonColor = false
                BoxBG.Font = Enum.Font.Gotham
                BoxBG.Text = ""
                BoxBG.TextColor3 = Color3.fromRGB(255, 255, 255)
                BoxBG.TextSize = 14.000
                
                BoxBGC.CornerRadius = UDim.new(0, 4 * self.uiSettings.uiSize)
                BoxBGC.Name = "BoxBGC"
                BoxBGC.Parent = BoxBG
                
                TextBox.Parent = BoxBG
                TextBox.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                TextBox.BackgroundTransparency = 1.000
                TextBox.BorderSizePixel = 0
                TextBox.Size = UDim2.new(1, 0, 1, 0)
                TextBox.Font = Enum.Font.GothamMedium
                TextBox.Text = default
                TextBox.TextColor3 = theme.Text
                TextBox.PlaceholderColor3 = theme.Placeholder
                TextBox.TextSize = 14 * self.uiSettings.uiSize
                TextBox.TextTransparency = 0
                
                TextboxBackL.Name = "TextboxBackL"
                TextboxBackL.Parent = TextboxBack
                TextboxBackL.HorizontalAlignment = Enum.HorizontalAlignment.Right
                TextboxBackL.SortOrder = Enum.SortOrder.LayoutOrder
                TextboxBackL.VerticalAlignment = Enum.VerticalAlignment.Center
                
                TextboxBackP.Name = "TextboxBackP"
                TextboxBackP.Parent = TextboxBack
                TextboxBackP.PaddingRight = UDim.new(0, 6 * self.uiSettings.uiSize)
                
                local funcs = {}
                
                funcs.Set = function(self, value)
                    TextBox.Text = value
                    self.flags[flag] = value
                    callback(value)
                end
                
                if not self.components then self.components = {} end
                self.components[flag] = funcs
                
                TextBox.FocusLost:Connect(function()
                    if TextBox.Text == "" then
                        TextBox.Text = default
                    end
                    self.flags[flag] = TextBox.Text
                    callback(TextBox.Text)
                end)
                
                TextBox:GetPropertyChangedSignal("TextBounds"):Connect(function()
                    BoxBG.Size = UDim2.new(0, TextBox.TextBounds.X + 26 * self.uiSettings.uiSize, 0, 26 * self.uiSettings.uiSize)
                end)
                
                BoxBG.Size = UDim2.new(0, TextBox.TextBounds.X + 26 * self.uiSettings.uiSize, 0, 26 * self.uiSettings.uiSize)
                
                return funcs
            end
            
            -- 复用之前定义的Slider和Dropdown组件，仅替换样式色值
            function section.Slider(section, text, flag, default, min, max, precise, callback)
                local callback = callback or function() end
                local min = min or 1
                local max = max or 10
                local default = default or min
                local precise = precise or false
                self.flags[flag] = default
                assert(text, "No text provided")
                assert(flag, "No flag provided")
                assert(default, "No default value provided")
                
                local SliderModule = Instance.new("Frame")
                local SliderBack = Instance.new("TextButton")
                local SliderBackC = Instance.new("UICorner")
                local SliderBar = Instance.new("Frame")
                local SliderBarC = Instance.new("UICorner")
                local SliderPart = Instance.new("Frame")
                local SliderPartC = Instance.new("UICorner")
                local SliderValBG = Instance.new("TextButton")
                local SliderValBGC = Instance.new("UICorner")
                local SliderValue = Instance.new("TextBox")
                local MinSlider = Instance.new("TextButton")
                local AddSlider = Instance.new("TextButton")
                
                SliderModule.Name = "SliderModule"
                SliderModule.Parent = Objs
                SliderModule.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                SliderModule.BackgroundTransparency = 1.000
                SliderModule.BorderSizePixel = 0
                SliderModule.Position = UDim2.new(0, 0, 0, 0)
                SliderModule.Size = UDim2.new(0, 390 * self.uiSettings.uiSize, 0, 36 * self.uiSettings.uiSize)
                
                SliderBack.Name = "SliderBack"
                SliderBack.Parent = SliderModule
                SliderBack.BackgroundColor3 = theme.Accent
                SliderBack.BackgroundTransparency = 0.2
                SliderBack.BorderSizePixel = 0
                SliderBack.Size = UDim2.new(0, 390 * self.uiSettings.uiSize, 0, 36 * self.uiSettings.uiSize)
                SliderBack.AutoButtonColor = false
                SliderBack.Font = Enum.Font.GothamMedium
                SliderBack.Text = "   " .. text
                SliderBack.TextColor3 = theme.Text
                SliderBack.TextSize = 15 * self.uiSettings.uiSize
                SliderBack.TextTransparency = 0
                SliderBack.TextXAlignment = Enum.TextXAlignment.Left
                
                SliderBackC.CornerRadius = UDim.new(0, 6 * self.uiSettings.uiSize)
                SliderBackC.Name = "SliderBackC"
                SliderBackC.Parent = SliderBack
                
                SliderBar.Name = "SliderBar"
                SliderBar.Parent = SliderBack
                SliderBar.AnchorPoint = Vector2.new(0, 0.5)
                SliderBar.BackgroundColor3 = theme.Background
                SliderBar.BackgroundTransparency = 0
                SliderBar.BorderSizePixel = 0
                SliderBar.Position = UDim2.new(0.35, 36 * self.uiSettings.uiSize, 0.5, 0)
                SliderBar.Size = UDim2.new(0, 120 * self.uiSettings.uiSize, 0, 10 * self.uiSettings.uiSize)
                
                SliderBarC.CornerRadius = UDim.new(0, 5 * self.uiSettings.uiSize)
                SliderBarC.Name = "SliderBarC"
                SliderBarC.Parent = SliderBar
                
                SliderPart.Name = "SliderPart"
                SliderPart.Parent = SliderBar
                SliderPart.BackgroundColor3 = theme.Text
                SliderPart.Size = UDim2.new(0, 48 * self.uiSettings.uiSize, 0, 11 * self.uiSettings.uiSize)
                
                SliderPartC.CornerRadius = UDim.new(0, 5 * self.uiSettings.uiSize)
                SliderPartC.Name = "SliderPartC"
                SliderPartC.Parent = SliderPart
                
                SliderValBG.Name = "SliderValBG"
                SliderValBG.Parent = SliderBack
                SliderValBG.BackgroundColor3 = theme.Button
                SliderValBG.BackgroundTransparency = 0.3
                SliderValBG.BorderSizePixel = 0
                SliderValBG.Position = UDim2.new(0.86, 0, 0.22, 0)
                SliderValBG.Size = UDim2.new(0, 40 * self.uiSettings.uiSize, 0, 26 * self.uiSettings.uiSize)
                SliderValBG.AutoButtonColor = false
                SliderValBG.Font = Enum.Font.Gotham
                SliderValBG.Text = ""
                SliderValBG.TextColor3 = Color3.fromRGB(255, 255, 255)
                SliderValBG.TextSize = 14.000
                
                SliderValBGC.CornerRadius = UDim.new(0, 4 * self.uiSettings.uiSize)
                SliderValBGC.Name = "SliderValBGC"
                SliderValBGC.Parent = SliderValBG
                
                SliderValue.Name = "SliderValue"
                SliderValue.Parent = SliderValBG
                SliderValue.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                SliderValue.BackgroundTransparency = 1.000
                SliderValue.BorderSizePixel = 0
                SliderValue.Size = UDim2.new(1, 0, 1, 0)
                SliderValue.Font = Enum.Font.GothamMedium
                SliderValue.Text = "1000"
                SliderValue.TextColor3 = theme.Text
                SliderValue.TextSize = 14 * self.uiSettings.uiSize
                SliderValue.TextTransparency = 0
                
                MinSlider.Name = "MinSlider"
                MinSlider.Parent = SliderModule
                MinSlider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                MinSlider.BackgroundTransparency = 1.000
                MinSlider.BorderSizePixel = 0
                MinSlider.Position = UDim2.new(0.28, 36 * self.uiSettings.uiSize, 0.22, 0)
                MinSlider.Size = UDim2.new(0, 18 * self.uiSettings.uiSize, 0, 18 * self.uiSettings.uiSize)
                MinSlider.Font = Enum.Font.GothamBold
                MinSlider.Text = "-"
                MinSlider.TextColor3 = theme.Text
                MinSlider.TextSize = 22.000 * self.uiSettings.uiSize
                MinSlider.TextTransparency = 0
                MinSlider.TextWrapped = true
                
                AddSlider.Name = "AddSlider"
                AddSlider.Parent = SliderModule
                AddSlider.AnchorPoint = Vector2.new(0, 0.5)
                AddSlider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                AddSlider.BackgroundTransparency = 1.000
                AddSlider.BorderSizePixel = 0
                AddSlider.Position = UDim2.new(0.79, 0, 0.5, 0)
                AddSlider.Size = UDim2.new(0, 18 * self.uiSettings.uiSize, 0, 18 * self.uiSettings.uiSize)
                AddSlider.Font = Enum.Font.GothamBold
                AddSlider.Text = "+"
                AddSlider.TextColor3 = theme.Text
                AddSlider.TextSize = 22.000 * self.uiSettings.uiSize
                AddSlider.TextTransparency = 0
                AddSlider.TextWrapped = true
                
                local funcs = {
                    SetValue = function(self, value)
                        local percent = (mouse.X - SliderBar.AbsolutePosition.X) / SliderBar.AbsoluteSize.X
                        if value then
                            percent = (value - min) / (max - min)
                        end
                        percent = math.clamp(percent, 0, 1)
                        if precise then
                            value = value or tonumber(string.format("%.1f", tostring(min + (max - min) * percent)))
                        else
                            value = value or math.floor(min + (max - min) * percent)
                        end
                        self.flags[flag] = tonumber(value)
                        SliderValue.Text = tostring(value)
                        SliderPart.Size = UDim2.new(percent, 0, 1, 0)
                        callback(tonumber(value))
                    end
                }
                
                if not self.components then self.components = {} end
                self.components[flag] = funcs
                
                MinSlider.MouseButton1Click:Connect(function()
                    local currentValue = self.flags[flag]
                    currentValue = math.clamp(currentValue - 1, min, max)
                    funcs:SetValue(currentValue)
                end)
                
                AddSlider.MouseButton1Click:Connect(function()
                    local currentValue = self.flags[flag]
                    currentValue = math.clamp(currentValue + 1, min, max)
                    funcs:SetValue(currentValue)
                end)
                
                funcs:SetValue(default)
                
                local dragging, boxFocused, allowed = false, false, { [""] = true, ["-"] = true }
                
                SliderBar.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        funcs:SetValue()
                        dragging = true
                    end
                end)
                
                services.UserInputService.InputEnded:Connect(function(input)
                    if dragging and input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = false
                    end
                end)
                
                services.UserInputService.InputChanged:Connect(function(input)
                    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                        funcs:SetValue()
                    end
                end)
                
                SliderBar.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.Touch then
                        funcs:SetValue()
                        dragging = true
                    end
                end)
                
                services.UserInputService.InputEnded:Connect(function(input)
                    if dragging and input.UserInputType == Enum.UserInputType.Touch then
                        dragging = false
                    end
                end)
                
                services.UserInputService.InputChanged:Connect(function(input)
                    if dragging and input.UserInputType == Enum.UserInputType.Touch then
                        funcs:SetValue()
                    end
                end)
                
                SliderValue.Focused:Connect(function()
                    boxFocused = true
                end)
                
                SliderValue.FocusLost:Connect(function()
                    boxFocused = false
                    if SliderValue.Text == "" then
                        funcs:SetValue(default)
                    end
                end)
                
                SliderValue:GetPropertyChangedSignal("Text"):Connect(function()
                    if not boxFocused then
                        return
                    end
                    SliderValue.Text = SliderValue.Text:gsub("%D+", "")
                    local text = SliderValue.Text
                    if not tonumber(text) then
                        SliderValue.Text = SliderValue.Text:gsub("%D+", "")
                    elseif not allowed[text] then
                        if tonumber(text) > max then
                            text = max
                            SliderValue.Text = tostring(max)
                        end
                        funcs:SetValue(tonumber(text))
                    end
                end)
                
                return funcs
            end
            
            function section.Dropdown(section, text, flag, options, callback)
                local callback = callback or function() end
                local options = options or {}
                assert(text, "No text provided")
                assert(flag, "No flag provided")
                self.flags[flag] = nil
                
                local DropdownModule = Instance.new("Frame")
                local DropdownTop = Instance.new("TextButton")
                local DropdownTopC = Instance.new("UICorner")
                local DropdownOpen = Instance.new("TextButton")
                local DropdownText = Instance.new("TextBox")
                local DropdownModuleL = Instance.new("UIListLayout")
                
                DropdownModule.Name = "DropdownModule"
                DropdownModule.Parent = Objs
                DropdownModule.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                DropdownModule.BackgroundTransparency = 1.000
                DropdownModule.BorderSizePixel = 0
                DropdownModule.ClipsDescendants = true
                DropdownModule.Position = UDim2.new(0, 0, 0, 0)
                DropdownModule.Size = UDim2.new(0, 390 * self.uiSettings.uiSize, 0, 36 * self.uiSettings.uiSize)
                
                DropdownTop.Name = "DropdownTop"
                DropdownTop.Parent = DropdownModule
                DropdownTop.BackgroundColor3 = theme.Accent
                DropdownTop.BackgroundTransparency = 0.2
                DropdownTop.BorderSizePixel = 0
                DropdownTop.Size = UDim2.new(0, 390 * self.uiSettings.uiSize, 0, 36 * self.uiSettings.uiSize)
                DropdownTop.AutoButtonColor = false
                DropdownTop.Font = Enum.Font.GothamMedium
                DropdownTop.Text = ""
                DropdownTop.TextColor3 = Color3.fromRGB(255, 255, 255)
                DropdownTop.TextSize = 15.000
                DropdownTop.TextXAlignment = Enum.TextXAlignment.Left
                
                DropdownTopC.CornerRadius = UDim.new(0, 6 * self.uiSettings.uiSize)
                DropdownTopC.Name = "DropdownTopC"
                DropdownTopC.Parent = DropdownTop
                
                DropdownOpen.Name = "DropdownOpen"
                DropdownOpen.Parent = DropdownTop
                DropdownOpen.AnchorPoint = Vector2.new(0, 0.5)
                DropdownOpen.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                DropdownOpen.BackgroundTransparency = 1.000
                DropdownOpen.BorderSizePixel = 0
                DropdownOpen.Position = UDim2.new(0.9, 0, 0.5, 0)
                DropdownOpen.Size = UDim2.new(0, 18 * self.uiSettings.uiSize, 0, 18 * self.uiSettings.uiSize)
                DropdownOpen.Font = Enum.Font.GothamBold
                DropdownOpen.Text = "+"
                DropdownOpen.TextColor3 = theme.Text
                DropdownOpen.TextSize = 22.000 * self.uiSettings.uiSize
                DropdownOpen.TextTransparency = 0
                DropdownOpen.TextWrapped = true
                
                DropdownText.Name = "DropdownText"
                DropdownText.Parent = DropdownTop
                DropdownText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                DropdownText.BackgroundTransparency = 1.000
                DropdownText.BorderSizePixel = 0
                DropdownText.Position = UDim2.new(0.03, 0, 0, 0)
                DropdownText.Size = UDim2.new(0, 160 * self.uiSettings.uiSize, 0, 36 * self.uiSettings.uiSize)
                DropdownText.Font = Enum.Font.GothamMedium
                DropdownText.PlaceholderColor3 = theme.Placeholder
                DropdownText.PlaceholderText = text
                DropdownText.Text = ""
                DropdownText.TextColor3 = theme.Text
                DropdownText.TextSize = 15 * self.uiSettings.uiSize
                DropdownText.TextTransparency = 0
                DropdownText.TextXAlignment = Enum.TextXAlignment.Left
                
                DropdownModuleL.Name = "DropdownModuleL"
                DropdownModuleL.Parent = DropdownModule
                DropdownModuleL.SortOrder = Enum.SortOrder.LayoutOrder
                DropdownModuleL.Padding = UDim.new(0, 4 * self.uiSettings.uiSize)
                
                local setAllVisible = function()
                    local options = DropdownModule:GetChildren()
                    for i = 1, #options do
                        local option = options[i]
                        if option:IsA("TextButton") and option.Name:match("Option_") then
                            option.Visible = true
                        end
                    end
                end
                
                local searchDropdown = function(text)
                    local options = DropdownModule:GetChildren()
                    for i = 1, #options do
                        local option = options[i]
                        if text == "" then
                            setAllVisible()
                        else
                            if option:IsA("TextButton") and option.Name:match("Option_") then
                                if option.Text:lower():match(text:lower()) then
                                    option.Visible = true
                                else
                                    option.Visible = false
                                end
                            end
                        end
                    end
                end
                
                local open = false
                local ToggleDropVis = function()
                    open = not open
                    if open then
                        setAllVisible()
                    end
                    DropdownOpen.Text = (open and "-" or "+")
                    DropdownModule.Size =
                        UDim2.new(0, 390 * self.uiSettings.uiSize, 0, (open and DropdownModuleL.AbsoluteContentSize.Y + 4 * self.uiSettings.uiSize or 36 * self.uiSettings.uiSize))
                end
                
                DropdownOpen.MouseButton1Click:Connect(ToggleDropVis)
                
                DropdownText.Focused:Connect(function()
                    if open then
                        return
                    end
                    ToggleDropVis()
                end)
                
                DropdownText:GetPropertyChangedSignal("Text"):Connect(function()
                    if not open then
                        return
                    end
                    searchDropdown(DropdownText.Text)
                end)
                
                DropdownModuleL:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                    if not open then
                        return
                    end
                    DropdownModule.Size = UDim2.new(0, 390 * self.uiSettings.uiSize, 0, (DropdownModuleL.AbsoluteContentSize.Y + 4 * self.uiSettings.uiSize))
                end)
                
                local funcs = {}
                
                funcs.AddOption = function(self, option)
                    local Option = Instance.new("TextButton")
                    local OptionC = Instance.new("UICorner")
                    
                    Option.Name = "Option_" .. option
                    Option.Parent = DropdownModule
                    Option.BackgroundColor3 = theme.Button
                    Option.BackgroundTransparency = 0.3
                    Option.BorderSizePixel = 0
                    Option.Position = UDim2.new(0, 0, 0.328125, 0)
                    Option.Size = UDim2.new(0, 390 * self.uiSettings.uiSize, 0, 24 * self.uiSettings.uiSize)
                    Option.AutoButtonColor = false
                    Option.Font = Enum.Font.GothamMedium
                    Option.Text = option
                    Option.TextColor3 = theme.Text
                    Option.TextSize = 14 * self.uiSettings.uiSize
                    Option.TextTransparency = 0
                    
                    OptionC.CornerRadius = UDim.new(0, 4 * self.uiSettings.uiSize)
                    OptionC.Name = "OptionC"
                    OptionC.Parent = Option
                    
                    Option.MouseButton1Click:Connect(function()
                        ToggleDropVis()
                        callback(Option.Text)
                        DropdownText.Text = Option.Text
                        self.flags[flag] = Option.Text
                    end)
                end
                
                funcs.RemoveOption = function(self, option)
                    local option = DropdownModule:FindFirstChild("Option_" .. option)
                    if option then
                        option:Destroy()
                    end
                end
                
                funcs.SetOptions = function(self, options)
                    for _, v in next, DropdownModule:GetChildren() do
                        if v.Name:match("Option_") then
                            v:Destroy()
                        end
                    end
                    for _, v in next, options do
                        funcs:AddOption(v)
                    end
                end
                
                funcs.Set = function(self, value)
                    for _, option in next, DropdownModule:GetChildren() do
                        if option:IsA("TextButton") and option.Name == "Option_" .. value then
                            option:MouseButton1Click()
                            break
                        end
                    end
                end
                
                if not self.components then self.components = {} end
                self.components[flag] = funcs
                
                funcs:SetOptions(options)
                return funcs
            end
            
            -- WindUI专属配置管理区（适配原功能）
            function section.WindConfigManager(section)
                local configName = "Wind默认配置"
                local statusLabel = section:Label("当前配置: " .. self.currentConfig)
                
                section:Textbox("配置名称", "wind_config_name", configName, function(value)
                    configName = value
                end)
                
                section:Button("保存配置", function()
                    local success, message = SaveConfig(configName)
                    statusLabel.Text = message
                    
                    local tempLabel = section:Label("✓ " .. message)
                    task.delay(3, function()
                        if tempLabel and tempLabel.Parent then
                            tempLabel:Destroy()
                        end
                    end)
                end)
                
                section:Button("加载配置", function()
                    local success, message = LoadConfig(configName)
                    statusLabel.Text = message
                    
                    local tempLabel = section:Label("✓ " .. message)
                    task.delay(3, function()
                        if tempLabel and tempLabel.Parent then
                            tempLabel:Destroy()
                        end
                    end)
                end)
                
                section:Button("重置UI样式", function()
                    self.uiSettings = {
                        mainColor = Color3.fromRGB(0, 0, 0),
                        backgroundColor = Color3.fromRGB(0, 0, 0),
                        backgroundColorTransparency = 0.5,
                        controlColor = Color3.fromRGB(30, 30, 30),
                        controlTransparency = 0.3,
                        textColor = Color3.fromRGB(255, 255, 255),
                        placeholderColor = Color3.fromRGB(180, 180, 180),
                        disabledTextColor = Color3.fromRGB(150, 150, 150),
                        uiSize = 1.0,
                        backgroundImage = "",
                        minimizeShape = "Square",
                        minimizeImage = "",
                        minimizeSize = UDim2.new(0, 61, 0, 32),
                        cornerRadius = 6,
                        buttonCornerRadius = 6,
                        sectionCornerRadius = 6,
                        sliderCornerRadius = 4,
                        dropdownCornerRadius = 6,
                        titleTextSize = 16,
                        buttonTextSize = 16,
                        labelTextSize = 14,
                        sectionTextSize = 16,
                        tabTextSize = 14,
                        sliderValueTextSize = 14,
                        dropdownTextSize = 16,
                        textboxTextSize = 14
                    }
                    
                    self:UpdateUIStyle()
                    self:UpdateWindUIStyle()
                    statusLabel.Text = "WindUI样式已重置为默认值"
                end)
            end
            
            return section
        end
        return tab
    end
    
    -- 创建WindUI默认标签页
    local defaultTab = windWindow:Tab("主功能区", 4370341699)
    local configTab = windWindow:Tab("配置管理", 4370341699)
    local defaultSection = defaultTab:section("基础功能", true)
    local configSection = configTab:section("配置管理", true)
    
    -- 示例组件
    defaultSection:Button("测试按钮", function()
        self:Notify({
            Title = "WindUI提示",
            Content = "按钮功能正常工作",
            Duration = 3
        })
    end)
    defaultSection:Toggle("测试开关", "wind_test_toggle", false, function(state)
        self:Notify({
            Title = "开关状态",
            Content = "当前状态: " .. tostring(state),
            Duration = 2
        })
    end)
    defaultSection:Slider("测试滑块", "wind_test_slider", 50, 0, 100, false, function(value)
        -- 滑块回调逻辑
    end)
    configSection:WindConfigManager()
    
    return windWindow
end

-- WindUI样式更新函数
function library:UpdateWindUIStyle()
    local theme = self.windUIThemes[self.currentWindTheme]
    local uiSize = self.uiSettings.uiSize
    
    -- 更新主窗口样式
    local WindMain = self.uiElements.WindMain
    local Topbar = WindMain:FindFirstChild("Topbar")
    local Sidebar = self.uiElements.WindSidebar
    local MainContent = self.uiElements.WindMainContent
    local WindOpen = self.uiElements.WindScreenGui:FindFirstChild("WindOpen")
    local ThemeToggle = Topbar:FindFirstChild("ThemeToggle")
    
    if WindMain then
        WindMain.BackgroundColor3 = theme.Background
        WindMain.Size = UDim2.new(0, 620 * uiSize, 0, 480 * uiSize)
        local UICorner = WindMain:FindFirstChildOfClass("UICorner")
        if UICorner then
            UICorner.CornerRadius = UDim.new(0, 12 * uiSize)
        end
    end
    
    if Topbar then
        Topbar.BackgroundColor3 = theme.Accent
        Topbar.Size = UDim2.new(1, 0, 0, 48 * uiSize)
        local WindTitle = Topbar:FindFirstChild("WindTitle")
        if WindTitle then
            WindTitle.TextSize = 18 * uiSize
            WindTitle.TextColor3 = theme.Text
            WindTitle.Size = UDim2.new(0, 200 * uiSize, 0, 32 * uiSize)
        end
    end
    
    if ThemeToggle then
        ThemeToggle.BackgroundColor3 = theme.Button
        ThemeToggle.TextColor3 = theme.Text
        ThemeToggle.Size = UDim2.new(0, 120 * uiSize, 0, 32 * uiSize)
        local corner = ThemeToggle:FindFirstChildOfClass("UICorner")
        if corner then
            corner.CornerRadius = UDim.new(0, 6 * uiSize)
        end
    end
    
    if Sidebar then
        Sidebar.BackgroundColor3 = theme.Accent
        Sidebar.Size = UDim2.new(0, 180 * uiSize, 1, -48 * uiSize)
        Sidebar.ScrollBarThickness = 2 * uiSize
        local list = Sidebar:FindFirstChildOfClass("ThListLayout")
        if list then
            list.Padding = UDim.new(0, 6 * uiSize)
        end
    end
    
    if MainContent then
        MainContent.BackgroundColor3 = theme.Background
        MainContent.Size = UDim2.new(1, -180 * uiSize, 1, -48 * uiSize)
        local list = MainContent:FindFirstChildOfClass("UIListLayout")
        if list then
            list.Padding = UDim.new(0, 8 * uiSize)
        end
    end
    
    if WindOpen then
        WindOpen.BackgroundColor3 = theme.Accent
        WindOpen.TextColor3 = theme.Text
        WindOpen.Size = UDim2.new(0, 50 * uiSize, 0, 50 * uiSize)
        WindOpen.TextSize = 20 * uiSize
        local corner = WindOpen:FindFirstChildOfClass("UICorner")
        if corner then
            corner.CornerRadius = UDim.new(0.5, 0)
        end
    end
    
    -- 更新所有标签页和组件样式
    for _, tab in pairs(MainContent:GetChildren()) do
        if tab:IsA("ScrollingFrame") then
            tab.BackgroundColor3 = theme.Background
            tab.ScrollBarThickness = 2 * uiSize
            for _, section in pairs(tab:GetChildren()) do
                if section:IsA("Frame") and section.Name:match("WindSection") then
                    section.BackgroundColor3 = theme.Accent
                    section.BackgroundTransparency = 0.2
                    local sectionC = section:FindFirstChildOfClass("UICorner")
                    if sectionC then
                        sectionC.CornerRadius = UDim.new(0, 8 * uiSize)
                    end
                    
                    local sectionText = section:FindFirstChild("SectionText")
                    if sectionText then
                        sectionText.TextColor3 = theme.Text
                        sectionText.TextSize = 16 * uiSize
                        local openIcon = sectionText:FindFirstChild("SectionOpen")
                        local openedIcon = sectionText:FindFirstChild("SectionOpened")
                        if openIcon then openIcon.ImageColor3 = theme.Icon end
                        if openedIcon then openedIcon.ImageColor3 = theme.Icon end
                    end
                    
                    if section:FindFirstChild("Objs") then
                        local objs = section.Objs
                        for _, obj in pairs(objs:GetChildren()) do
                            if obj:IsA("Frame") then
                                for _, element in pairs(obj:GetChildren()) do
                                    if element:IsA("TextButton") then
                                        if element.Name == "Btn" or element.Name == "ToggleBtn" or element.Name == "KeybindBtn" then
                                            element.BackgroundColor3 = theme.Button
                                            element.BackgroundTransparency = 0.2
                                            element.TextColor3 = theme.Text
                                            element.TextSize = 15 * uiSize
                                            local btnCorner = element:FindFirstChildOfClass("UICorner")
                                            if btnCorner then
                                                btnCorner.CornerRadius = UDim.new(0, 6 * uiSize)
                                            end
                                        end
                                    elseif element:IsA("Frame") then
                                        if element.Name == "ToggleDisable" then
                                            element.BackgroundColor3 = theme.Background
                                            local switch = element:FindFirstChild("ToggleSwitch")
                                            if switch then
                                                switch.BackgroundColor3 = theme.Text
                                            end
                                        elseif element.Name == "SliderBar" then
                                            element.BackgroundColor3 = theme.Background
                                            local part = element:FindFirstChild("SliderPart")
                                            if part then
                                                part.BackgroundColor3 = theme.Text
                                            end
                                        elseif element.Name == "BoxBG" or element.Name == "KeybindValue" then
                                            element.BackgroundColor3 = theme.Button
                                            element.BackgroundTransparency = 0.3
                                        end
                                    elseif element:IsA("TextBox") then
                                        element.TextColor3 = theme.Text
                                        element.PlaceholderColor3 = theme.Placeholder
                                        element.TextSize = 14 * uiSize
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end

-- 核心：UI切换功能实现
function library:SwitchUI(uiType)
    local defaultUI = self.uiElements.Main
    local windUI = self.uiElements.WindMain
    local defaultOpen = self.uiElements.Open
    local windOpen = self.uiElements.WindScreenGui:FindFirstChild("WindOpen")
    
    if uiType == "Default" then
        -- 切换到默认UI
        if windUI then
            windUI.Visible = false
        end
        if windOpen then
            windOpen.Visible = false
        end
        if defaultUI then
            defaultUI.Visible = true
        end
        if defaultOpen then
            defaultOpen.Visible = true
        end
        self.currentUI = "Default"
        self:UpdateUIStyle()
    elseif uiType == "WindUI" then
        -- 切换到WindUI
        if defaultUI then
            defaultUI.Visible = false
        end
        if defaultOpen then
            defaultOpen.Visible = false
        end
        if windUI then
            windUI.Visible = true
        end
        if windOpen then
            windOpen.Visible = true
        end
        self.currentUI = "WindUI"
        self:UpdateWindUIStyle()
    end
    
    -- 保存当前UI状态
    self:SaveConfig("UI状态配置")
    self:Notify({
        Title = "UI切换成功",
        Content = "当前使用: " .. uiType,
        Duration = 2
    })
end

-- 初始化UI切换按钮（添加到默认UI的配置区）
function library:InitUISwitchButton()
    local configTab = nil
    for _, tab in pairs(self.uiElements.TabMain:GetChildren()) do
        if tab.Name == "Tab" and tab:FindFirstChild("Section") then
            local sections = tab:GetChildren()
            for _, section in pairs(sections) do
                if section.Name == "Section" and section:FindFirstChild("SectionText") and section.SectionText.Text == "UI样式设置" then
                    -- 添加UI切换按钮到样式设置区
                    section.Objs:FindFirstChildOfClass("UIListLayout").Padding = UDim.new(0, 8 * self.uiSettings.uiSize)
                    
                    local switchFrame = Instance.new("Frame")
                    switchFrame.Name = "UISwitchFrame"
                    switchFrame.Parent = section.Objs
                    switchFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    switchFrame.BackgroundTransparency = 1.000
                    switchFrame.Size = UDim2.new(0, 428 * self.uiSettings.uiSize, 0, 38 * self.uiSettings.uiSize)
                    
                    local defaultBtn = Instance.new("TextButton")
                    defaultBtn.Name = "DefaultUIBtn"
                    defaultBtn.Parent = switchFrame
                    defaultBtn.BackgroundColor3 = self.uiSettings.controlColor
                    defaultBtn.BackgroundTransparency = self.uiSettings.controlTransparency
                    defaultBtn.BorderSizePixel = 0
                    defaultBtn.Size = UDim2.new(0.48, 0, 0, 38 * self.uiSettings.uiSize)
                    defaultBtn.AutoButtonColor = false
                    defaultBtn.Font = Enum.Font.GothamBold
                    defaultBtn.Text = "默认UI"
                    defaultBtn.TextColor3 = self.uiSettings.textColor
                    defaultBtn.TextSize = self.uiSettings.buttonTextSize * self.uiSettings.uiSize
                    defaultBtn.TextTransparency = 0
                    
                    local defaultBtnC = Instance.new("UICorner")
                    defaultBtnC.CornerRadius = UDim.new(0, self.uiSettings.buttonCornerRadius * self.uiSettings.uiSize)
                    defaultBtnC.Parent = defaultBtn
                    
                    local windBtn = Instance.new("TextButton")
                    windBtn.Name = "WindUIBtn"
                    windBtn.Parent = switchFrame
                    windBtn.BackgroundColor3 = self.uiSettings.controlColor
                    windBtn.BackgroundTransparency = self.uiSettings.controlTransparency
                    windBtn.BorderSizePixel = 0
                    windBtn.Position = UDim2.new(0.52, 0, 0, 0)
                    windBtn.Size = UDim2.new(0.48, 0, 0, 38 * self.uiSettings.uiSize)
                    windBtn.AutoButtonColor = false
                    windBtn.Font = Enum.Font.GothamBold
                    windBtn.Text = "WindUI"
                    windBtn.TextColor3 = self.uiSettings.textColor
                    windBtn.TextSize = self.uiSettings.buttonTextSize * self.uiSettings.uiSize
                    windBtn.TextTransparency = 0
                    
                    local windBtnC = Instance.new("UICorner")
                    windBtnC.CornerRadius = UDim.new(0, self.uiSettings.buttonCornerRadius * self.uiSettings.uiSize)
                    windBtnC.Parent = windBtn
                    
                    -- 绑定切换事件
                    defaultBtn.MouseButton1Click:Connect(function()
                        self:SwitchUI("Default")
                    end)
                    
                    windBtn.MouseButton1Click:Connect(function()
                        self:SwitchUI("WindUI")
                    end)
                    
                    -- 添加涟漪效果
                    defaultBtn.MouseButton1Click:Connect(function()
                        spawn(function()
                            Ripple(defaultBtn)
                        end)
                    end)
                    
                    windBtn.MouseButton1Click:Connect(function()
                        spawn(function()
                            Ripple(windBtn)
                        end)
                    end)
                    
                    break
                end
            end
            if configTab then break end
        end
    end
end

-- 初始化WindUI主题
library.windUIThemes = {
    Dark = {
        Background = Color3.fromRGB(17, 17, 17),
        Accent = Color3.fromRGB(30, 30, 30),
        Button = Color3.fromRGB(45, 45, 45),
        Text = Color3.fromRGB(240, 240, 240),
        Icon = Color3.fromRGB(180, 180, 180),
        Placeholder = Color3.fromRGB(120, 120, 120)
    },
    Light = {
        Background = Color3.fromRGB(245, 245, 245),
        Accent = Color3.fromRGB(230, 230, 230),
        Button = Color3.fromRGB(215, 215, 215),
        Text = Color3.fromRGB(30, 30, 30),
        Icon = Color3.fromRGB(80, 80, 80),
        Placeholder = Color3.fromRGB(150, 150, 150)
    }
}
library.currentWindTheme = "Dark"
library.currentUI = "Default"

-- 初始化通知系统（适配WindUI）
function library:Notify(params)
    local title = params.Title or "通知"
    local content = params.Content or ""
    local duration = params.Duration or 3
    local icon = params.Icon or nil
    
    local NotifyGui = Instance.new("ScreenGui")
    NotifyGui.Name = "WindNotify"
    NotifyGui.Parent = services.CoreGui
    if syn and syn.protect_gui then
        syn.protect_gui(NotifyGui)
    end
    
    local NotifyFrame = Instance.new("Frame")
    NotifyFrame.Name = "NotifyFrame"
    NotifyFrame.Parent = NotifyGui
    NotifyFrame.AnchorPoint = Vector2.new(1, 0)
    NotifyFrame.Position = UDim2.new(1, -20, 0, 20)
    NotifyFrame.Size = UDim2.new(0, 300 * self.uiSettings.uiSize, 0, 0)
    NotifyFrame.BackgroundColor3 = self.currentUI == "WindUI" and self.windUIThemes[self.currentWindTheme].Accent or self.uiSettings.controlColor
    NotifyFrame.BackgroundTransparency = self.currentUI == "WindUI" and 0.2 or self.uiSettings.controlTransparency
    NotifyFrame.ZIndex = 1000
    
    local NotifyC = Instance.new("UICorner")
    NotifyC.CornerRadius = UDim.new(0, 8 * self.uiSettings.uiSize)
    NotifyC.Parent = NotifyFrame
    
    local NotifyContent = Instance.new("Frame")
    NotifyContent.Name = "NotifyContent"
    NotifyContent.Parent = NotifyFrame
    NotifyContent.BackgroundTransparency = 1.000
    NotifyContent.Size = UDim2.new(1, 0, 1, 0)
    
    local NotifyLayout = Instance.new("UIListLayout")
    NotifyLayout.Name = "NotifyLayout"
    NotifyLayout.Parent = NotifyContent
    NotifyLayout.SortOrder = Enum.SortOrder.LayoutOrder
    NotifyLayout.Padding = UDim.new(0, 8 * self.uiSettings.uiSize)
    
    local TitleLabel = Instance.new("TextLabel")
    TitleLabel.Name = "TitleLabel"
    TitleLabel.Parent = NotifyContent
    TitleLabel.BackgroundTransparency = 1.000
    TitleLabel.Font = Enum.Font.GothamBold
    TitleLabel.Text = title
    TitleLabel.TextColor3 = self.currentUI == "WindUI" and self.windUIThemes[self.currentWindTheme].Text or self.uiSettings.textColor
    TitleLabel.TextSize = 16 * self.uiSettings.uiSize
    TitleLabel.TextTransparency = 0
    TitleLabel.LayoutOrder = 1
    
    local ContentLabel = Instance.new("TextLabel")
    ContentLabel.Name = "ContentLabel"
    ContentLabel.Parent = NotifyContent
    ContentLabel.BackgroundTransparency = 1.000
    ContentLabel.Font = Enum.Font.GothamMedium
    ContentLabel.Text = content
    ContentLabel.TextColor3 = self.currentUI == "WindUI" and self.windUIThemes[self.currentWindTheme].Text or self.uiSettings.textColor
    ContentLabel.TextSize = 14 * self.uiSettings.uiSize
    ContentLabel.TextTransparency = 0.2
    ContentLabel.LayoutOrder = 2
    
    local UIPadding = Instance.new("UIPadding")
    UIPadding.Parent = NotifyContent
    UIPadding.PaddingTop = UDim.new(0, 12 * self.uiSettings.uiSize)
    UIPadding.PaddingLeft = UDim.new(0, 12 * self.uiSettings.uiSize)
    UIPadding.PaddingRight = UDim.new(0, 12 * self.uiSettings.uiSize)
    UIPadding.PaddingBottom = UDim.new(0, 12 * self.uiSettings.uiSize)
    
    -- 自动调整大小
    NotifyLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        NotifyFrame.Size = UDim2.new(0, 300 * self.uiSettings.uiSize, 0, NotifyLayout.AbsoluteContentSize.Y + 24 * self.uiSettings.uiSize)
    end)
    
    -- 显示动画
    services.TweenService:Create(
        NotifyFrame,
        TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out),
        { Position = UDim2.new(1, -20, 0, 20) }
    ):Play()
    
    -- 自动销毁
    task.delay(duration, function()
        services.TweenService:Create(
            NotifyFrame,
            TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.In),
            { Position = UDim2.new(1, 320 * self.uiSettings.uiSize, 0, 20), BackgroundTransparency = 1 }
        ):Play()
        task.wait(0.3)
        NotifyGui:Destroy()
    end)
end

-- 初始化所有核心功能
library:CreateWindUI()
library:InitUISwitchButton()

-- 加载上次保存的UI状态
task.spawn(function()
    local success, configData = pcall(function()
        return LoadConfig("UI状态配置")
    end)
    if success and configData and configData.__elements and configData.__elements.ui_switch then
        local lastUI = configData.__elements.ui_switch.value
        if lastUI == "WindUI" then
            library:SwitchUI("WindUI")
        end
    end
end)

-- 暴露外部接口
return {
    Library = library,
    SwitchUI = function(uiType)
        library:SwitchUI(uiType)
    end,
    CreateWindow = function(params)
        return library:new(library, params.Name or "UI库", params.Theme or "Dark")
    end
}
