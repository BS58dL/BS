-- 全局模块初始化
local aa = {
    Window = nil,
    Windows = {}, -- 多窗口支持
    Theme = nil,
    Creator = a.load'a',
    LocalizationModule = a.load'b',
    NotificationModule = a.load'c',
    Themes = a.load'd',
    Transparent = false,
    TransparencyValue = .15,
    UIScale = 1,
    Version = "0.0.0",
    Services = a.load'h',
    OnThemeChangeFunction = nil,
    CanvasScale = 1, -- 无限画布缩放系数
    AllElements = {},
    CurrentFocus = 1 -- 键盘焦点索引
}

local ac = game:GetService"HttpService"
local ae = ac:JSONDecode(a.load'i')
if ae then aa.Version = ae.version end

local af = a.load'm'
local ag = aa.Services
local ah = aa.Themes
local ai = aa.Creator
local aj = ai.New
local ak = ai.Tween

-- 1. 视觉体系重构：3D立体+赛博朋克风格
do
    -- 1.1 3D立体窗口框架
    function ai.Create3DBorder(parent, cornerRadius)
        local border3D = aj("Frame", {
            Size = UDim2.new(1, 12, 1, 12),
            Position = UDim2.new(0, -6, 0, -6),
            BackgroundTransparency = 1,
            Parent = parent,
            ZIndex = -1
        }, {
            ae.NewRoundFrame(cornerRadius + 2, "Squircle", {
                Size = UDim2.new(1, 0, 1, 0),
                ImageColor3 = Color3.new(0, 0, 0),
                ImageTransparency = 0.2,
            })
        })
        -- 鼠标跟随光影
        game:GetService("UserInputService").InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement then
                local viewport = game:GetService("Workspace").CurrentCamera.ViewportSize
                local lightX = input.Position.X / viewport.X
                local lightY = input.Position.Y / viewport.Y
                border3D.Position = UDim2.new(0, -6 + (lightX - 0.5)*8, 0, -6 + (lightY - 0.5)*8)
            end
        end)
        return border3D
    end

    -- 1.2 霓虹光效控件
    function ai.AddNeonEffect(elem, enable)
        if enable then
            local neonStroke = aj("UIStroke", {
                Thickness = 2,
                Color = Color3.fromHSV(tick() % 1, 1, 1),
                Parent = elem
            })
            -- 霓虹色循环
            game:GetService("RunService").RenderStepped:Connect(function()
                neonStroke.Color = Color3.fromHSV(tick() % 1, 1, 1)
            end)
            return neonStroke
        end
    end

    -- 1.3 故障艺术弹窗
    function ai.AddGlitchEffect(elem, duration)
        local glitchTimer = 0
        local conn = game:GetService("RunService").RenderStepped:Connect(function(dt)
            glitchTimer = glitchTimer + dt
            if glitchTimer < duration then
                elem.Position = UDim2.new(0.5, math.random(-3, 3), 0.5, math.random(-3, 3))
                elem.Background.ImageColor3 = Color3.fromHSV(tick() % 1, 0.3, 1)
            else
                elem.Position = UDim2.new(0.5, 0, 0.5, 0)
                conn:Disconnect()
            end
        end)
    end
end

-- 2. 核心功能增强：多窗口+无限画布+AI输入
do
    -- 2.1 多窗口支持
    function aa.CreateWindow(ar)
        local at = a.load'V'
        if not isfolder"WindUI" then makefolder"WindUI" end
        if ar.Folder then makefolder(ar.Folder) else makefolder(ar.Title) end
        
        ar.WindUI = aa
        ar.Parent = aa.ScreenGui.Window
        
        -- 加载主题
        local av = ah[ar.Theme or "Dark"]
        ai.SetTheme(av)

        -- 密钥验证（保留原逻辑）
        local au = true
        local aw = gethwid or function() return game:GetService"Players".LocalPlayer.UserId end
        local ax = aw()
        if ar.KeySystem then
            au = false
            local function loadKeysystem()
                af.new(ar, ax, function(ay) au = ay end)
            end
            local ay = ar.Folder.."/"..ax..".key"
            if not ar.KeySystem.API then
                if ar.KeySystem.SaveKey and isfile(ay) then
                    local az = readfile(ay)
                    local aA = (type(ar.KeySystem.Key)=="table") and table.find(ar.KeySystem.Key, az) or tostring(ar.KeySystem.Key)==tostring(az)
                    if aA then au = true else loadKeysystem() end
                else loadKeysystem() end
            else
                if isfile(ay) then
                    local az = readfile(ay)
                    local aA = false
                    for aB,aC in next,ar.KeySystem.API do
                        local aD = aa.Services[aC.Type]
                        if aD then
                            local aE = {}
                            for b,e in next,aD.Args do table.insert(aE,aC[e]) end
                            local g = aD.New(table.unpack(aE))
                            local h = g.Verify(az)
                            if h then aA = true break end
                        end
                    end
                    au = aA
                    if not aA then loadKeysystem() end
                else loadKeysystem() end
            end
        end
        repeat task.wait() until au

        -- 创建窗口并添加到窗口列表
        local ay = at(ar)
        aa.Transparent = ar.Transparent
        table.insert(aa.Windows, ay)
        aa.Window = ay -- 保持默认窗口引用

        -- 添加3D边框
        ai.Create3DBorder(ay.UIElements.Main, ay.UICorner)

        -- 窗口记忆功能
        if ar.SavePosition ~= false then
            local posPath = "WindUI/"..(ar.Folder or ar.Title).."/window_pos.json"
            -- 加载位置
            if isfile(posPath) then
                local posData = ac:JSONDecode(readfile(posPath))
                ay.UIElements.Main.Position = UDim2.new(
                    posData.X.Scale, posData.X.Offset,
                    posData.Y.Scale, posData.Y.Offset
                )
                ay.UIElements.Main.Size = UDim2.new(
                    posData.Size.X.Scale, posData.Size.X.Offset,
                    posData.Size.Y.Scale, posData.Size.Y.Offset
                )
            end
            -- 保存位置
            ay.Closed:Connect(function()
                local posData = {
                    X = {Scale = ay.UIElements.Main.Position.X.Scale, Offset = ay.UIElements.Main.Position.X.Offset},
                    Y = {Scale = ay.UIElements.Main.Position.Y.Scale, Offset = ay.UIElements.Main.Position.Y.Offset},
                    Size = {
                        X = {Scale = ay.UIElements.Main.Size.X.Scale, Offset = ay.UIElements.Main.Size.X.Offset},
                        Y = {Scale = ay.UIElements.Main.Size.Y.Scale, Offset = ay.UIElements.Main.Size.Y.Offset}
                    }
                }
                writefile(posPath, ac:JSONEncode(posData))
            end)
        end

        -- 无限画布支持
        if ar.CanvasMode then
            ay.CanvasMode = true
            -- 画布缩放
            function ay.ZoomCanvas(scale)
                aa.CanvasScale = math.clamp(aa.CanvasScale + scale, 0.2, 2)
                ay.UIElements.Main.UIScale.Scale = aa.CanvasScale
            end
            -- 鼠标滚轮缩放
            game:GetService("UserInputService").InputChanged:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseWheel and ay:IsOpen() then
                    ay:ZoomCanvas(input.Position.Z * 0.1)
                end
            end)
        end

        -- 窗口嵌套功能
        ay.ChildWindows = {}
        function ay.AddChildWindow(childWin)
            childWin.UIElements.Main.Parent = ay.UIElements.MainBar
            childWin.UIElements.Main.Position = UDim2.new(0.1, 0, 0.1, 0)
            childWin.UIElements.Main.Size = UDim2.new(0.8, 0, 0.8, 0)
            table.insert(ay.ChildWindows, childWin)
        end

        return ay
    end

    -- 2.2 窗口切换
    function aa.SwitchWindow(index)
        for i, win in ipairs(aa.Windows) do
            win:Close()
        end
        if aa.Windows[index] then
            aa.Windows[index]:Open()
            aa.Window = aa.Windows[index]
        end
    end

    -- 2.3 AI智能输入（集成OpenAI）
    function ai.EnableAIAutoComplete(inputElem, apiKey)
        local isTyping = false
        ae.AddSignal(inputElem:GetPropertyChangedSignal("Text"), function()
            local text = inputElem.Text
            if #text > 3 and not isTyping then
                isTyping = true
                -- 调用OpenAI API
                task.spawn(function()
                    local success, res = pcall(function()
                        return ai.Request({
                            Url = "https://api.openai.com/v1/completions",
                            Method = "POST",
                            Headers = {
                                ["Authorization"] = "Bearer " .. apiKey,
                                ["Content-Type"] = "application/json"
                            },
                            Body = ac:JSONEncode({
                                model = "text-davinci-003",
                                prompt = text,
                                max_tokens = 10,
                                temperature = 0.7
                            })
                        })
                    end)
                    if success and res.StatusCode == 200 then
                        local data = ac:JSONDecode(res.Body)
                        inputElem.PlaceholderText = text .. (data.choices[1].text or "")
                    end
                    isTyping = false
                end)
            end
        end)
    end

    -- 2.4 语音控制（简化版，需Roblox语音权限）
    function ai.EnableVoiceControl(elem, voiceCmd, callback)
        local voiceService = game:GetService("VoiceChatService")
        if voiceService then
            voiceService.VoiceDetected:Connect(function(voiceData)
                local cmd = string.lower(voiceData.Text:gsub("%s+", ""))
                if cmd == string.lower(voiceCmd:gsub("%s+", "")) then
                    callback()
                end
            end)
        end
    end
end

-- 3. 交互体验优化：手势操作+键盘导航
do
    -- 3.1 多点触控支持（双指缩放/旋转）
    function ai.AddMultiTouchSupport(elem)
        local touchPoints = {}
        local lastDist = 0
        local lastAngle = 0

        ae.AddSignal(game:GetService("UserInputService").InputChanged, function(input)
            if input.UserInputType == Enum.UserInputType.Touch then
                -- 记录触控点
                if input.UserInputState == Enum.UserInputState.Begin then
                    table.insert(touchPoints, input)
                elseif input.UserInputState == Enum.UserInputState.End then
                    for i, t in ipairs(touchPoints) do
                        if t == input then table.remove(touchPoints, i) end
                    end
                end

                -- 双指操作
                if #touchPoints == 2 then
                    local p1 = touchPoints[1].Position
                    local p2 = touchPoints[2].Position
                    local currDist = (p1 - p2).Magnitude
                    local currAngle = math.deg(math.atan2(p2.Y - p1.Y, p2.X - p1.X))

                    -- 缩放
                    if lastDist > 0 then
                        local scale = currDist / lastDist
                        elem.Size = UDim2.new(0, elem.AbsoluteSize.X * scale, 0, elem.AbsoluteSize.Y * scale)
                    end

                    -- 旋转（仅支持有旋转属性的控件）
                    if lastAngle ~= 0 and elem:FindFirstChildOfClass("UIGradient") then
                        local angleDiff = currAngle - lastAngle
                        elem.UIGradient.Rotation = elem.UIGradient.Rotation + angleDiff
                    end

                    lastDist = currDist
                    lastAngle = currAngle
                else
                    lastDist = 0
                    lastAngle = 0
                end
            end
        end)
    end

    -- 3.2 键盘导航（Tab切换焦点）
    function aa.EnableKeyboardNavigation()
        game:GetService("UserInputService").InputBegan:Connect(function(input)
            if input.KeyCode == Enum.KeyCode.Tab then
                -- 切换焦点
                aa.CurrentFocus = (aa.CurrentFocus % #aa.AllElements) + 1
                local focusedElem = aa.AllElements[aa.CurrentFocus]
                if focusedElem and focusedElem.Highlight then
                    focusedElem:Highlight()
                end

                -- Enter键触发
                elseif input.KeyCode == Enum.KeyCode.Return then
                local focusedElem = aa.AllElements[aa.CurrentFocus]
                if focusedElem and focusedElem.Callback then
                    focusedElem.Callback()
                end
            end
        end)
    end
end

-- 4. 扩展功能：皮肤系统+图表控件+多人同步
do
    -- 4.1 皮肤系统（导入/导出）
    function aa.ImportSkin(skinPath)
        if not isfile(skinPath) then warn("Skin file not found") return end
        local skinData = ac:JSONDecode(readfile(skinPath))
        
        -- 导入主题
        for themeName, themeData in pairs(skinData.Themes or {}) do
            aa.AddTheme(themeName, themeData)
        end

        -- 导入动效参数
        ai.DefaultTweenTime = skinData.TweenTime or 0.1
        ai.DefaultHoverScale = skinData.HoverScale or 1.03

        -- 应用皮肤
        if aa.Window then
            aa.SetTheme(skinData.DefaultTheme or "Dark")
        end
    end

    function aa.ExportSkin(skinPath, defaultTheme)
        local skinData = {
            Themes = aa.GetThemes(),
            DefaultTheme = defaultTheme or aa.GetCurrentTheme(),
            TweenTime = ai.DefaultTweenTime or 0.1,
            HoverScale = ai.DefaultHoverScale or 1.03
        }
        writefile(skinPath, ac:JSONEncode(skinData))
    end

    -- 4.2 图表控件（折线图/柱状图）
    function aa.CreateChart(parent, chartType, data, options)
        options = options or {}
        local chartFrame = aj("Frame", {
            Parent = parent,
            Size = options.Size or UDim2.new(1, 0, 0, 200),
            BackgroundTransparency = 1
        }, {
            -- 坐标轴
            aj("Frame", {
                Size = UDim2.new(1, 0, 0, 1),
                Position = UDim2.new(0, 0, 1, 0),
                BackgroundColor3 = Color3.new(0.5, 0.5, 0.5)
            }),
            aj("Frame", {
                Size = UDim2.new(0, 1, 1, 0),
                Position = UDim2.new(0, 0, 0, 0),
                BackgroundColor3 = Color3.new(0.5, 0.5, 0.5)
            })
        })

        local xStep = chartFrame.AbsoluteSize.X / (#data - 1)
        local yMax = math.max(table.unpack(data))
        local yScale = chartFrame.AbsoluteSize.Y / yMax

        -- 折线图
        if chartType == "LineChart" then
            for i = 1, #data - 1 do
                local y1 = 1 - (data[i] / yMax)
                local y2 = 1 - (data[i+1] / yMax)
                local line = aj("Frame", {
                    Position = UDim2.new(0, (i-1)*xStep, y1, 0),
                    Size = UDim2.new(0, xStep, 0, 2),
                    BackgroundColor3 = options.Color or Color3.new(1, 0, 0),
                    Parent = chartFrame
                })
                -- 添加数据点
                aj("Frame", {
                    Position = UDim2.new(0, (i-1)*xStep, y1, 0),
                    Size = UDim2.new(0, 6, 0, 6),
                    BackgroundColor3 = options.Color or Color3.new(1, 0, 0),
                    Parent = chartFrame,
                    AnchorPoint = Vector2.new(0.5, 0.5)
                }, {
                    aj("UICorner", {CornerRadius = UDim.new(1, 0)})
                })
            end
        end

        -- 柱状图
        elseif chartType == "BarChart" then
            local barWidth = xStep * 0.6
            for i = 1, #data do
                local y = 1 - (data[i] / yMax)
                aj("Frame", {
                    Position = UDim2.new(0, (i-1)*xStep + (xStep - barWidth)/2, y, 0),
                    Size = UDim2.new(0, barWidth, 1 - y, 0),
                    BackgroundColor3 = options.Color or Color3.new(0, 0, 1),
                    Parent = chartFrame
                }, {
                    aj("UICorner", {CornerRadius = UDim.new(0, 4)})
                })
            end
        end

        return chartFrame
    end

    -- 4.3 多人UI同步（基于RemoteEvent）
    function aa.EnableUISync(remoteEvent, window)
        -- 发送本地状态
        ae.AddSignal(window.UIElements.Main:GetPropertyChangedSignal("Size"), function()
            remoteEvent:FireServer("UISize", {
                X = {Scale = window.UIElements.Main.Size.X.Scale, Offset = window.UIElements.Main.Size.X.Offset},
                Y = {Scale = window.UIElements.Main.Size.Y.Scale, Offset = window.UIElements.Main.Size.Y.Offset}
            })
        end)

        ae.AddSignal(window.UIElements.Main:GetPropertyChangedSignal("Position"), function()
            remoteEvent:FireServer("UIPos", {
                X = {Scale = window.UIElements.Main.Position.X.Scale, Offset = window.UIElements.Main.Position.X.Offset},
                Y = {Scale = window.UIElements.Main.Position.Y.Scale, Offset = window.UIElements.Main.Position.Y.Offset}
            })
        end)

        -- 接收远程状态
        remoteEvent.OnClientEvent:Connect(function(type, data)
            if type == "UISize" then
                window.UIElements.Main.Size = UDim2.new(
                    data.X.Scale, data.X.Offset,
                    data.Y.Scale, data.Y.Offset
                )
            elseif type == "UIPos" then
                window.UIElements.Main.Position = UDim2.new(
                    data.X.Scale, data.X.Offset,
                    data.Y.Scale, data.Y.Offset
                )
            end
        end)
    end
end

-- 5. 基础模块重载（整合魔改功能）
do
    -- 5.1 按钮模块重载（添加霓虹+缩放）
    local originalButtonNew = a.load'j'.New
    function a.load'j'.New(text, icon, callback, variant, parent, window, neonMode)
        local btn = originalButtonNew(text, icon, callback, variant, parent, window)
        
        -- 添加霓虹效果
        if neonMode then
            ai.AddNeonEffect(btn, true)
        end

        --  hover缩放
        local hoverScale = ai.DefaultHoverScale or 1.03
        ae.AddSignal(btn.MouseEnter, function()
            ak(btn.Frame, .047, {ImageTransparency = .95}):Play()
            ak(btn, .047, {Scale = hoverScale}):Play()
        end)
        ae.AddSignal(btn.MouseLeave, function()
            ak(btn.Frame, .047, {ImageTransparency = 1}):Play()
            ak(btn, .047, {Scale = 1}):Play()
        end)

        -- 添加到元素列表（用于键盘导航）
        table.insert(aa.AllElements, {
            Callback = callback,
            Highlight = function()
                ak(btn.Frame, .1, {ImageTransparency = .8}):Play()
                task.delay(.5, function()
                    ak(btn.Frame, .1, {ImageTransparency = 1}):Play()
                end)
            end
        })

        return btn
    end

    -- 5.2 输入框模块重载（添加AI输入）
    local originalInputNew = a.load'k'.New
    function a.load'k'.New(placeholder, icon, parent, type, callback, aiApiKey)
        local input = originalInputNew(placeholder, icon, parent, type, callback)
        
        -- 启用AI自动补全
        if aiApiKey then
            ai.EnableAIAutoComplete(input.Frame.Frame.TextBox, aiApiKey)
        end

        -- 添加到元素列表
        table.insert(aa.AllElements, {
            Highlight = function()
                ak(input.Frame.Frame, .1, {ImageTransparency = .8}):Play()
                task.delay(.5, function()
                    ak(input.Frame.Frame, .1, {ImageTransparency = 1}):Play()
                end)
            end
        })

        return input
    end

    -- 5.3 弹窗模块重载（添加故障效果）
    local originalPopupNew = a.load'r'.new
    function a.load'r'.new(params)
        local popup = originalPopupNew(params)
        
        -- 启用故障效果
        if params.GlitchEffect then
            ai.AddGlitchEffect(popup.UIElements.MainContainer, 0.5)
        end

        return popup
    end
end

-- 6. 初始化配置
do
    -- 初始化屏幕Gui
    local am = game:GetService"Players"and game:GetService"Players".LocalPlayer or nil
    local an = protectgui or(syn and syn.protect_gui)or function()end
    local ao = gethui and gethui()or game.CoreGui

    aa.ScreenGui = aj("ScreenGui", {
        Name = "WindUI",
        Parent = ao,
        IgnoreGuiInset = true,
        ScreenInsets = "None",
    }, {
        aj("UIScale", {Scale = aa.UIScale}),
        aj("Folder", {Name = "Window"}),
        aj("Folder", {Name = "KeySystem"}),
        aj("Folder", {Name = "Popups"}),
        aj("Folder", {Name = "ToolTips"})
    })

    aa.NotificationGui = aj("ScreenGui", {
        Name = "WindUI/Notifications",
        Parent = ao,
        IgnoreGuiInset = true,
    })

    aa.DropdownGui = aj("ScreenGui", {
        Name = "WindUI/Dropdowns",
        Parent = ao,
        IgnoreGuiInset = true,
    })

    an(aa.ScreenGui)
    an(aa.NotificationGui)
    an(aa.DropdownGui)

    -- 初始化通知模块
    ai.Init(aa)
    math.clamp(aa.TransparencyValue, 0, 1)
    local ap = aa.NotificationModule.Init(aa.NotificationGui)

    -- 基础API保留
    function aa.Notify(aq, ar)
        ar.Holder = ap.Frame
        ar.Window = aa.Window
        return aa.NotificationModule.New(ar)
    end

    function aa.SetNotificationLower(aq, ar)
        ap.SetLower(ar)
    end

    function aa.SetFont(aq, ar)
        ai.UpdateFont(ar)
    end

    function aa.OnThemeChange(aq, ar)
        aa.OnThemeChangeFunction = ar
    end

    function aa.AddTheme(aq, ar)
        ah[ar.Name] = ar
        return ar
    end

    function aa.SetTheme(aq, ar)
        if ah[ar] then
            aa.Theme = ah[ar]
            ai.SetTheme(ah[ar])
            if aa.OnThemeChangeFunction then
                aa.OnThemeChangeFunction(ar)
            end
            return ah[ar]
        end
        return nil
    end

    function aa.GetThemes(aq)
        return ah
    end

    function aa.GetCurrentTheme(aq)
        return aa.Theme.Name
    end

    -- 启用键盘导航
    aa.EnableKeyboardNavigation()

    -- 默认主题
    aa:SetTheme"Dark"
    aa:SetLanguage(ai.Language)
end

return aa